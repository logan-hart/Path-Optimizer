/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const Node = __webpack_require__(/*! ./scripts/node.js */ \"./src/scripts/node.js\");\nconst Path = __webpack_require__(/*! ./scripts/path.js */ \"./src/scripts/path.js\");\nconst Graph = __webpack_require__(/*! ./scripts/graph.js */ \"./src/scripts/graph.js\");\nconst Algorithm = __webpack_require__(/*! ./scripts/algorithm.js */ \"./src/scripts/algorithm.js\");\nconst Legend = __webpack_require__(/*! ./scripts/legend.js */ \"./src/scripts/legend.js\");\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const graphcanvas = document.getElementById(\"graphcanvas\");\n  const legendcanvas = document.getElementById(\"legendcanvas\");\n  const ctx = graphcanvas.getContext(\"2d\");\n  const ctx2 = legendcanvas.getContext(\"2d\");\n  const startButton = document.getElementById('startbutton');\n  const resetButton = document.getElementById('resetbutton');\n  window.ctx = ctx;\n  window.ctx2 = ctx2;\n  window.Node = Node;\n  window.Path = Path;\n  // window.Graph = Graph;\n  // window.Algorithm = Algorithm;\n  // window.Legend = Legend;\n\n  graphcanvas.width = 1250;\n  graphcanvas.height = 750;\n  legendcanvas.width = 100;\n  ctx.fillRect(0, 0, 1250, 750);\n  ctx.font = \"20px helvetica\";\n  ctx2.fillStyle = \"rgba(0,0,0, 0)\";\n  ctx2.fillRect(0, 0, 40, 80);\n  g = new Graph();\n  g.draw(ctx);\n  l = new Legend();\n  startButton.addEventListener('click', e => {\n    e.preventDefault();\n    algo = new Algorithm();\n    algo.paths.forEach(function (el) {\n      el.status = 'none';\n    });\n    algo.determinePathing();\n    algo.animateNodes(ctx);\n    algo.animatePath(ctx);\n    startButton.disabled = true;\n    setTimeout(function () {\n      startButton.disabled = false;\n    }, g.delay * 8);\n    resetButton.disabled = true;\n    setTimeout(function () {\n      resetButton.disabled = false;\n    }, g.delay * 8);\n  });\n  resetButton.addEventListener('click', e => {\n    e.preventDefault();\n    algo.nodes.forEach(function (el) {\n      el.status = \"unvisited\";\n    });\n    algo.paths.forEach(function (el) {\n      el.traffic = 'none';\n      el.status = 'none';\n    });\n    algo.graph.draw(ctx);\n  });\n  function getMousePosition(graphcanvas, event) {\n    let rect = graphcanvas.getBoundingClientRect();\n    let x = event.clientX - rect.left;\n    let y = event.clientY - rect.top;\n    return [x, y];\n  }\n  graphcanvas.addEventListener(\"click\", e => {\n    let pos = getMousePosition(graphcanvas, e);\n    let trafficStatus = ['none', 'light', 'medium', 'heavy'];\n    let inNode;\n    Object.keys(g.nodeHitBoxes).forEach(function (el) {\n      let hitbox = g.nodeHitBoxes[el];\n      if (pos[0] > hitbox[2] && pos[0] < hitbox[3] && pos[1] > hitbox[0] && pos[1] < hitbox[1]) inNode = true;\n    });\n    g.pathHitBoxes.forEach(function (path) {\n      if (this.ctx.isPointInStroke(path, e.offsetX, e.offsetY) && !inNode) {\n        let currentPath = g.paths[g.pathHitBoxes.indexOf(path)];\n        let currentTraffic = trafficStatus.indexOf(currentPath.traffic);\n        currentPath.traffic = trafficStatus[currentTraffic + 1];\n        currentPath.calculateWeight();\n        g.draw(ctx);\n      }\n    });\n  });\n  let is_dragging = false;\n  let startX;\n  let startY;\n  let dragNode;\n  let downPos;\n  graphcanvas.addEventListener('mousedown', function (e) {\n    [startX, startY] = getMousePosition(graphcanvas, e);\n    downPos = Array.from(getMousePosition(graphcanvas, e));\n    Object.keys(g.nodeHitBoxes).forEach(function (el) {\n      let hitbox = g.nodeHitBoxes[el];\n      if (startX > hitbox[2] && startX < hitbox[3] && startY > hitbox[0] && startY < hitbox[1]) {\n        dragNode = g.nodes.find(node => node.name === el);\n        is_dragging = true;\n        return;\n      }\n    });\n  });\n  let mouse_up = function (e) {\n    e.preventDefault();\n    let [currentX, currentY] = getMousePosition(graphcanvas, e);\n    let distance = Math.sqrt(Math.pow(currentX - downPos[0], 2) + Math.pow(currentY - startY, 2));\n    if (distance < 1) {\n      Object.keys(g.nodeHitBoxes).forEach(function (el) {\n        let hitbox = g.nodeHitBoxes[el];\n        if (startX > hitbox[2] && startX < hitbox[3] && startY > hitbox[0] && startY < hitbox[1]) {\n          let found = g.nodes.find(node => node.name === el);\n          let result = selectedSpaceship();\n          if (result === -1) {\n            found.selected = 'start';\n          } else if (result === 0 && found.selected !== 'start') {\n            found.selected = 'end';\n          } else if (found.selected === 'end') {\n            found.selected = 'none';\n          } else {\n            g.clearSelected();\n          }\n          g.draw(ctx);\n        }\n      });\n    }\n    if (!is_dragging) {\n      return;\n    }\n    is_dragging = false;\n  };\n  function selectedSpaceship() {\n    let start = 0;\n    let end = 0;\n    Object.keys(g.nodes).forEach(function (element) {\n      let node = g.nodes[element];\n      if (node.selected === 'start') {\n        start += 1;\n      } else if (node.selected === 'end') {\n        end += 1;\n      }\n    });\n    return start === 0 && end === 0 ? -1 : start === 1 && end === 0 ? 0 : 1;\n  }\n  let mouse_out = function (e) {\n    e.preventDefault();\n    if (!is_dragging) {\n      return;\n    }\n    is_dragging = false;\n  };\n  let mouse_move = function (e) {\n    if (!is_dragging) {\n      return;\n    } else {\n      e.preventDefault();\n      let dragPos = getMousePosition(graphcanvas, e);\n      let dx = dragPos[0] - startX;\n      let dy = dragPos[1] - startY;\n      dragNode.pos[0] += dx;\n      dragNode.pos[1] += dy;\n      g.draw(ctx);\n      startX = dragPos[0];\n      startY = dragPos[1];\n      g.paths.forEach(function (ele) {\n        ele.distance = ele.calculateDistance();\n        ele.weight = ele.calculateWeight();\n        ele.associations();\n      });\n      g.buildHitBoxes();\n    }\n  };\n  graphcanvas.onmouseup = mouse_up;\n  graphcanvas.onmouseout = mouse_out;\n  graphcanvas.onmousemove = mouse_move;\n  const slider = document.getElementById(\"myRange\");\n  slider.oninput = function () {\n    g.delay = 1000 - this.value;\n  };\n  const openModalButtons = document.querySelectorAll('[data-modal-target]');\n  const closeModalButtons = document.querySelectorAll('[data-close-button]');\n  const overlay = document.getElementById('overlay');\n  overlay.addEventListener('click', () => {\n    const modals = document.querySelectorAll('.modal.active');\n    modals.forEach(modal => {\n      closeModal();\n    });\n  });\n  openModalButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      const modal = document.querySelector(button.dataset.modalTarget);\n      openModal(modal);\n    });\n  });\n  closeModalButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      const modal = button.closest('.modal');\n      closeModal(modal);\n    });\n  });\n  function openModal(modal) {\n    if (modal == null) return;\n    modal.classList.add('active');\n    overlay.classList.add('active');\n  }\n  function closeModal(modal) {\n    if (modal == null) return;\n    modal.classList.remove('active');\n    overlay.classList.remove('active');\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/algorithm.js":
/*!**********************************!*\
  !*** ./src/scripts/algorithm.js ***!
  \**********************************/
/***/ (function(module) {

eval("function Algorithm() {\n  this.graph = g;\n  this.nodes = this.graph.nodes;\n  this.paths = this.graph.paths;\n  this.startNode = this.nodes.find(node => node.selected === 'start');\n  if (!this.startNode) {\n    this.startNode = this.nodes[0];\n    this.nodes[0].selected = 'start';\n  }\n  this.endNode = this.nodes.find(node => node.selected === 'end');\n  if (!this.endNode) {\n    this.endNode = this.nodes[this.nodes.length - 1];\n    this.nodes[this.nodes.length - 1].selected = 'end';\n  }\n  this.visitedNodes = [];\n}\nAlgorithm.prototype.determinePathing = function () {\n  let map = this.buildMap();\n  let currentNode = this.startNode.name;\n  let unvisitedNodes = Object.keys(map);\n  let shortestDist = {};\n  let path = {};\n  Object.keys(map).forEach(function (el) {\n    path[el] = [];\n  });\n  this.nodes.forEach(function (node) {\n    shortestDist[node.name] = Infinity;\n  });\n  shortestDist[currentNode] = 0;\n  path[currentNode] = [0, currentNode];\n  while (unvisitedNodes.length > 0) {\n    currentNode = Object.entries(shortestDist).filter(_ref => {\n      let [key] = _ref;\n      return unvisitedNodes.includes(key);\n    }).sort((a, b) => a[1] - b[1])[0][0];\n    this.visitedNodes.push(currentNode);\n    unvisitedNodes = unvisitedNodes.filter(el => el !== currentNode);\n    let distToCurrent = shortestDist[currentNode];\n    Object.keys(map[currentNode]).forEach(function (el) {\n      if (shortestDist[el] > map[currentNode][el] + distToCurrent) {\n        shortestDist[el] = map[currentNode][el] + distToCurrent;\n      }\n      if (path[el].length === 0) {\n        path[el] = [map[currentNode][el] + distToCurrent, currentNode];\n      }\n    });\n  }\n  debugger;\n  this.path = path;\n};\nAlgorithm.prototype.buildMap = function () {\n  let map = {};\n  for (let i = 0; i < this.nodes.length; i++) {\n    if (!map[this.nodes[i].name]) {\n      map[this.nodes[i].name] = this.nodes[i].neighbors;\n    }\n  }\n  return map;\n};\nAlgorithm.prototype.shortestPath = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  let currentNode = this.endNode.name;\n  let shortest = [];\n  while (currentNode !== this.startNode.name) {\n    shortest.push(currentNode);\n    currentNode = this.path[currentNode][1];\n  }\n  if (alpha.indexOf(this.startNode.name) > alpha.indexOf(this.endNode.name)) {\n    return shortest.concat(this.startNode.name);\n  } else {\n    return shortest.concat(this.startNode.name).reverse();\n  }\n};\nAlgorithm.prototype.animateNodes = function (ctx) {\n  let visitedNodes = this.visitedNodes.slice(0);\n  let that = this;\n  return new Promise(resolve => {\n    setInterval(_animateNodes, this.graph.delay);\n    function _animateNodes() {\n      if (visitedNodes.length > 0) {\n        let first = visitedNodes.shift();\n        that.nodes.find(node => node.name === first).status = 'visited';\n        that.graph.draw(ctx);\n      } else {\n        resolve();\n      }\n    }\n  });\n};\nAlgorithm.prototype.animatePath = async function (ctx) {\n  await this.animateNodes(ctx);\n  let that = this;\n  let shortest = that.shortestPath();\n  for (let i = 0; i < shortest.length - 1; i++) {\n    debugger;\n    current = that.paths.find(path => path.parentNode.name === shortest[i] && path.childNode.name === shortest[i + 1] || path.childNode.name === shortest[i] && path.parentNode.name === shortest[i + 1]);\n    current.status = 'shortest';\n    that.graph.draw(ctx);\n  }\n};\nmodule.exports = Algorithm;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/algorithm.js\n");

/***/ }),

/***/ "./src/scripts/graph.js":
/*!******************************!*\
  !*** ./src/scripts/graph.js ***!
  \******************************/
/***/ (function(module) {

eval("function Graph() {\n  this.nodes = [];\n  // this.numNodes = numNodes\n  this.nodeHitBoxes = {};\n  this.startingNodes = [[700, 100], [600, 175], [500, 250], [400, 325], [500, 400], [600, 475], [700, 550], [800, 475], [900, 400], [1000, 325], [900, 250], [800, 175]];\n  this.paths = [];\n  this.pathHitBoxes = [];\n  this.delay = 500;\n  this.placeNodes();\n  this.placePaths();\n  this.buildHitBoxes();\n}\nGraph.prototype.placeNodes = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  for (let i = 0; i < this.startingNodes.length; i++) {\n    this.nodes.push(new Node(alpha[i], this.startingNodes[i]));\n  }\n};\nGraph.prototype.buildHitBoxes = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  for (let i = 0; i < this.startingNodes.length; i++) {\n    this.nodeHitBoxes[alpha[i]] = [this.startingNodes[i][1] - 13, this.startingNodes[i][1] + 13, this.startingNodes[i][0] - 13, this.startingNodes[i][0] + 13];\n  }\n};\nGraph.prototype.placePaths = function () {\n  let nodePaths = [[this.nodes[0], this.nodes[4], 'none'], [this.nodes[0], this.nodes[8], 'none'], [this.nodes[1], this.nodes[5], 'none'], [this.nodes[1], this.nodes[9], 'none'], [this.nodes[2], this.nodes[10], 'none'], [this.nodes[3], this.nodes[7], 'none'], [this.nodes[3], this.nodes[11], 'none'], [this.nodes[4], this.nodes[8], 'none'], [this.nodes[4], this.nodes[0], 'none'], [this.nodes[5], this.nodes[9], 'none'], [this.nodes[5], this.nodes[1], 'none'], [this.nodes[6], this.nodes[10], 'none'], [this.nodes[6], this.nodes[2], 'none'], [this.nodes[7], this.nodes[11], 'none'], [this.nodes[7], this.nodes[3], 'none'], [this.nodes[8], this.nodes[0], 'none'], [this.nodes[8], this.nodes[4], 'none'], [this.nodes[9], this.nodes[1], 'none'], [this.nodes[1], this.nodes[7], 'none'], [this.nodes[5], this.nodes[11], 'none'],\n  // [this.nodes[1], this.nodes[7], 'none'],\n  // [this.nodes[5], this.nodes[11], 'none'],\n  [this.nodes[3], this.nodes[8], 'none'], [this.nodes[3], this.nodes[10], 'none'], [this.nodes[9], this.nodes[2], 'none'], [this.nodes[9], this.nodes[4], 'none']];\n  let that = this;\n  nodePaths.forEach(function (nodePair) {\n    that.paths.push(new Path(nodePair[0], nodePair[1]));\n  });\n};\nGraph.prototype.draw = function (ctx) {\n  ctx.clearRect(0, 0, 1250, 750);\n  ctx.fillStyle = \"rgba(225,225,225, 0.2)\";\n  ctx.fillRect(0, 0, 1250, 750);\n  this.placePathHBs();\n  this.paths.forEach(function (path) {\n    path.draw(ctx);\n  });\n  for (let i = 0; i < this.nodes.length; i++) {\n    this.nodes[i].draw(ctx);\n  }\n  this.nodes.forEach(function (node) {\n    node.draw(ctx);\n  });\n  this.annotate(ctx);\n};\nGraph.prototype.placePathHBs = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  for (let i = 0; i < this.paths.length; i++) {\n    this.pathHitBoxes.push(pathBox(alpha[i], i));\n  }\n};\nfunction pathBox(name, i) {\n  name = new Path2D();\n  name.moveTo(g.paths[i].startPos[0], g.paths[i].startPos[1]);\n  name.lineTo(g.paths[i].endPos[0], g.paths[i].endPos[1]);\n  ctx.lineWidth = 10;\n  ctx.strokeStyle = \"rgba(0,0,0,0)\";\n  ctx.stroke(name);\n  return name;\n}\nGraph.prototype.annotate = function (ctx) {\n  this.nodes.forEach(function (node) {\n    ctx.lineWidth = 1.5;\n    ctx.font = \"20px\";\n    ctx.strokeStyle = \"white\";\n    ctx.strokeText(`${node.name}`, node.pos[0] + 15, node.pos[1] + 25);\n  });\n};\nGraph.prototype.clearSelected = function () {\n  Object.keys(g.nodes).forEach(function (element) {\n    g.nodes[element].selected = null;\n  });\n};\nmodule.exports = Graph;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/graph.js\n");

/***/ }),

/***/ "./src/scripts/legend.js":
/*!*******************************!*\
  !*** ./src/scripts/legend.js ***!
  \*******************************/
/***/ (function(module) {

eval("function Legend() {\n  this.nodes = [new Node(\"legendstart\", [20, 20]), new Node(\"legendend\", [20, 60])];\n  this.nodes[0].selected = \"start\";\n  this.nodes[1].selected = \"end\";\n  this.nodes.forEach(function (node) {\n    node.draw(ctx2);\n  });\n}\nmodule.exports = Legend;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9sZWdlbmQuanMuanMiLCJuYW1lcyI6WyJMZWdlbmQiLCJub2RlcyIsIk5vZGUiLCJzZWxlY3RlZCIsImZvckVhY2giLCJub2RlIiwiZHJhdyIsImN0eDIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXRoLW9wdGltaXplci8uL3NyYy9zY3JpcHRzL2xlZ2VuZC5qcz8xZWE3Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIExlZ2VuZCgpe1xuICAgIHRoaXMubm9kZXMgPSBbbmV3IE5vZGUoXCJsZWdlbmRzdGFydFwiLCBbMjAsIDIwXSksIG5ldyBOb2RlKFwibGVnZW5kZW5kXCIsIFsyMCw2MF0pXTtcbiAgICB0aGlzLm5vZGVzWzBdLnNlbGVjdGVkID0gXCJzdGFydFwiIFxuICAgIHRoaXMubm9kZXNbMV0uc2VsZWN0ZWQgPSBcImVuZFwiXG4gICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgICBub2RlLmRyYXcoY3R4MilcbiAgICB9KVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gTGVnZW5kOyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsTUFBTSxHQUFFO0VBQ2IsSUFBSSxDQUFDQyxLQUFLLEdBQUcsQ0FBQyxJQUFJQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ2hGLElBQUksQ0FBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDRSxRQUFRLEdBQUcsT0FBTztFQUNoQyxJQUFJLENBQUNGLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ0UsUUFBUSxHQUFHLEtBQUs7RUFDOUIsSUFBSSxDQUFDRixLQUFLLENBQUNHLE9BQU8sQ0FBQyxVQUFTQyxJQUFJLEVBQUM7SUFDN0JBLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxJQUFJLENBQUM7RUFDbkIsQ0FBQyxDQUFDO0FBQ047QUFHQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdULE1BQU0ifQ==\n//# sourceURL=webpack-internal:///./src/scripts/legend.js\n");

/***/ }),

/***/ "./src/scripts/node.js":
/*!*****************************!*\
  !*** ./src/scripts/node.js ***!
  \*****************************/
/***/ (function(module) {

eval("function Node(name, pos) {\n  this.name = name;\n  this.pos = pos;\n  this.radius = 11;\n  this.neighbors = {};\n  this.status = 'unvisited';\n  this.selected = null;\n  // this.size = size             used for creating a larger graph\n}\n\nNode.prototype.draw = function (ctx) {\n  ctx.beginPath();\n  ctx.arc(this.pos[0], this.pos[1], this.radius, 0, Math.PI * 2, true);\n  if (this.selected === null) {\n    ctx.strokeStyle = \"white\";\n    ctx.lineWidth = 3;\n  } else if (this.selected === 'start') {\n    ctx.strokeStyle = \"#8ffe09\";\n    ctx.lineWidth = 7;\n  } else if (this.selected === 'end') {\n    ctx.strokeStyle = \"#9900FF\";\n    ctx.lineWidth = 7;\n  }\n  if (this.status !== 'visited') {\n    ctx.fillStyle = '#8ab0da';\n  } else {\n    ctx.fillStyle = '#65b00b';\n  }\n  ctx.stroke();\n  ctx.fill();\n};\nmodule.exports = Node;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9ub2RlLmpzLmpzIiwibmFtZXMiOlsiTm9kZSIsIm5hbWUiLCJwb3MiLCJyYWRpdXMiLCJuZWlnaGJvcnMiLCJzdGF0dXMiLCJzZWxlY3RlZCIsInByb3RvdHlwZSIsImRyYXciLCJjdHgiLCJiZWdpblBhdGgiLCJhcmMiLCJNYXRoIiwiUEkiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImZpbGxTdHlsZSIsInN0cm9rZSIsImZpbGwiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXRoLW9wdGltaXplci8uL3NyYy9zY3JpcHRzL25vZGUuanM/Zjk0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBOb2RlKG5hbWUsIHBvcyl7ICAgXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHRoaXMucG9zID0gcG9zXG4gICAgdGhpcy5yYWRpdXMgPSAxMVxuICAgIHRoaXMubmVpZ2hib3JzID0ge31cbiAgICB0aGlzLnN0YXR1cyA9ICd1bnZpc2l0ZWQnXG4gICAgdGhpcy5zZWxlY3RlZCA9IG51bGxcbiAgICAvLyB0aGlzLnNpemUgPSBzaXplICAgICAgICAgICAgIHVzZWQgZm9yIGNyZWF0aW5nIGEgbGFyZ2VyIGdyYXBoXG59XG5cbk5vZGUucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgpe1xuXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmModGhpcy5wb3NbMF0sIHRoaXMuIHBvc1sxXSwgdGhpcy5yYWRpdXMsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcbiAgICBpZiAodGhpcy5zZWxlY3RlZCA9PT0gbnVsbCl7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwid2hpdGVcIjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDM7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGVkID09PSAnc3RhcnQnKXtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCIjOGZmZTA5XCI7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSA3O1xuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZCA9PT0gJ2VuZCcpe1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcIiM5OTAwRkZcIjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDc7XG4gICAgfSBcbiAgICBpZiAodGhpcy5zdGF0dXMgIT09ICd2aXNpdGVkJyl7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnIzhhYjBkYSdcbiAgICB9IGVsc2Uge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gJyM2NWIwMGInXG4gICAgfVxuXG4gICAgY3R4LnN0cm9rZSgpO1xuICAgIGN0eC5maWxsKClcbiAgICBcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IE5vZGU7Il0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxJQUFJLENBQUNDLElBQUksRUFBRUMsR0FBRyxFQUFDO0VBQ3BCLElBQUksQ0FBQ0QsSUFBSSxHQUFHQSxJQUFJO0VBQ2hCLElBQUksQ0FBQ0MsR0FBRyxHQUFHQSxHQUFHO0VBQ2QsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtFQUNoQixJQUFJLENBQUNDLFNBQVMsR0FBRyxDQUFDLENBQUM7RUFDbkIsSUFBSSxDQUFDQyxNQUFNLEdBQUcsV0FBVztFQUN6QixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJO0VBQ3BCO0FBQ0o7O0FBRUFOLElBQUksQ0FBQ08sU0FBUyxDQUFDQyxJQUFJLEdBQUcsVUFBU0MsR0FBRyxFQUFDO0VBRS9CQSxHQUFHLENBQUNDLFNBQVMsRUFBRTtFQUNmRCxHQUFHLENBQUNFLEdBQUcsQ0FBQyxJQUFJLENBQUNULEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUVBLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNDLE1BQU0sRUFBRSxDQUFDLEVBQUVTLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUM7RUFDckUsSUFBSSxJQUFJLENBQUNQLFFBQVEsS0FBSyxJQUFJLEVBQUM7SUFDdkJHLEdBQUcsQ0FBQ0ssV0FBVyxHQUFHLE9BQU87SUFDekJMLEdBQUcsQ0FBQ00sU0FBUyxHQUFHLENBQUM7RUFDckIsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDVCxRQUFRLEtBQUssT0FBTyxFQUFDO0lBQ2pDRyxHQUFHLENBQUNLLFdBQVcsR0FBRyxTQUFTO0lBQzNCTCxHQUFHLENBQUNNLFNBQVMsR0FBRyxDQUFDO0VBQ3JCLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQ1QsUUFBUSxLQUFLLEtBQUssRUFBQztJQUMvQkcsR0FBRyxDQUFDSyxXQUFXLEdBQUcsU0FBUztJQUMzQkwsR0FBRyxDQUFDTSxTQUFTLEdBQUcsQ0FBQztFQUNyQjtFQUNBLElBQUksSUFBSSxDQUFDVixNQUFNLEtBQUssU0FBUyxFQUFDO0lBQzFCSSxHQUFHLENBQUNPLFNBQVMsR0FBRyxTQUFTO0VBQzdCLENBQUMsTUFBTTtJQUNIUCxHQUFHLENBQUNPLFNBQVMsR0FBRyxTQUFTO0VBQzdCO0VBRUFQLEdBQUcsQ0FBQ1EsTUFBTSxFQUFFO0VBQ1pSLEdBQUcsQ0FBQ1MsSUFBSSxFQUFFO0FBRWQsQ0FBQztBQUdEQyxNQUFNLENBQUNDLE9BQU8sR0FBR3BCLElBQUkifQ==\n//# sourceURL=webpack-internal:///./src/scripts/node.js\n");

/***/ }),

/***/ "./src/scripts/path.js":
/*!*****************************!*\
  !*** ./src/scripts/path.js ***!
  \*****************************/
/***/ (function(module) {

eval("function Path(parentNode, childNode, traffic) {\n  this.parentNode = parentNode;\n  this.childNode = childNode;\n  this.startPos = this.getStartPos();\n  this.endPos = this.getEndPos();\n  this.delta = [Math.abs(this.startPos[0] - this.endPos[0]), Math.abs(this.startPos[1] - this.endPos[1])];\n  this.distance = this.calculateDistance();\n  const trafficStatus = ['none', 'light', 'medium', 'heavy'];\n  this.traffic = trafficStatus[0];\n  this.weight = this.calculateWeight();\n  this.status = 'none';\n  this.associations();\n}\nPath.prototype.getStartPos = function () {\n  return this.parentNode.pos;\n};\nPath.prototype.getEndPos = function () {\n  return this.childNode.pos;\n};\nPath.prototype.calculateDistance = function () {\n  let a = this.startPos[0] - this.endPos[0];\n  let b = this.startPos[1] - this.endPos[1];\n  let c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n  return c / 96;\n};\nPath.prototype.calculateWeight = function () {\n  if (this.traffic === 'light') {\n    return this.distance * 1.5;\n  } else if (this.traffic === 'medium') {\n    return this.distance * 2.0;\n  } else if (this.traffic === 'heavy') {\n    return this.distance * 2.5;\n  } else {\n    return this.distance;\n  }\n};\nPath.prototype.draw = function (ctx) {\n  if (this.status === 'shortest') {\n    ctx.beginPath();\n    ctx.strokeStyle = '#00ACDF';\n    ctx.lineWidth = 12;\n    ctx.moveTo(this.startPos[0], this.startPos[1]);\n    ctx.lineTo(this.endPos[0], this.endPos[1]);\n    ctx.stroke();\n  }\n  ctx.beginPath();\n  if (this.traffic === 'light') {\n    ctx.strokeStyle = 'yellow';\n    ctx.lineWidth = 6;\n  } else if (this.traffic === 'medium') {\n    ctx.strokeStyle = 'orange';\n    ctx.lineWidth = 6;\n  } else if (this.traffic === 'heavy') {\n    ctx.strokeStyle = 'red';\n    ctx.lineWidth = 6;\n  } else if (this.status === 'shortest') {\n    ctx.strokeStyle = 'lightblue';\n    ctx.lineWidth = 6;\n  }\n  ctx.beginPath();\n  ctx.strokeStyle = 'white';\n  ctx.lineWidth = 1;\n  ctx.moveTo(this.startPos[0], this.startPos[1]);\n  ctx.lineTo(this.endPos[0], this.endPos[1]);\n  ctx.stroke();\n};\nPath.prototype.associations = function () {\n  this.parentNode.neighbors[this.childNode.name] = this.weight;\n  this.childNode.neighbors[this.parentNode.name] = this.weight;\n};\nmodule.exports = Path;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/path.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXRoLW9wdGltaXplci8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;