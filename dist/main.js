/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const Node = __webpack_require__(/*! ./scripts/node.js */ \"./src/scripts/node.js\");\nconst Path = __webpack_require__(/*! ./scripts/path.js */ \"./src/scripts/path.js\");\nconst Graph = __webpack_require__(/*! ./scripts/graph.js */ \"./src/scripts/graph.js\");\nconst Algorithm = __webpack_require__(/*! ./scripts/algorithm.js */ \"./src/scripts/algorithm.js\");\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const canvas = document.getElementById(\"canvas\");\n  canvas.width = 970;\n  canvas.height = 600;\n  const ctx = canvas.getContext(\"2d\");\n  window.ctx = ctx;\n  ctx.fillStyle = \"#F5FCFF\";\n  ctx.fillRect(0, 0, 970, 600);\n  ctx.font = \"20px helvetica\";\n  g = new Graph();\n  g.draw(ctx);\n  const startButton = document.getElementById('startbutton');\n  const resetButton = document.getElementById('resetbutton');\n  startButton.addEventListener('click', e => {\n    e.preventDefault();\n    algo = new Algorithm();\n    algo.determinePathing();\n    algo.animateNodes(ctx);\n    algo.animatePath(ctx);\n    startButton.disabled = true;\n    setTimeout(function () {\n      startButton.disabled = false;\n    }, g.delay * 8);\n    resetButton.disabled = true;\n    setTimeout(function () {\n      resetButton.disabled = false;\n    }, g.delay * 8);\n  });\n  resetButton.addEventListener('click', e => {\n    e.preventDefault();\n    algo.nodes.forEach(function (el) {\n      el.status = \"unvisited\";\n    });\n    algo.paths.forEach(function (el) {\n      el.status = \"none\";\n      el.traffic = 'none';\n    });\n    g.clearSelected();\n    algo.graph.draw(ctx);\n  });\n  function getMousePosition(canvas, event) {\n    let rect = canvas.getBoundingClientRect();\n    let x = event.clientX - rect.left;\n    let y = event.clientY - rect.top;\n    return [x, y];\n  }\n  canvas.addEventListener(\"click\", function (e) {\n    let pos = getMousePosition(canvas, e);\n    Object.keys(g.nodeHitBoxes).forEach(function (el) {\n      let hitbox = g.nodeHitBoxes[el];\n      if (pos[0] > hitbox[2] && pos[0] < hitbox[3] && pos[1] > hitbox[0] && pos[1] < hitbox[1]) {\n        let found = g.nodes.find(node => node.name === el);\n        let result = selectedSpaceship();\n        if (result === -1) {\n          found.selected = 'start';\n        } else if (result === 0 && found.selected !== 'start') {\n          found.selected = 'end';\n        } else {\n          g.clearSelected();\n        }\n        g.draw(ctx);\n      }\n    });\n  });\n  function selectedSpaceship() {\n    let start = 0;\n    let end = 0;\n    Object.keys(g.nodes).forEach(function (element) {\n      let newVar = g.nodes[element];\n      if (newVar.selected === 'start') {\n        start += 1;\n      } else if (newVar.selected === 'end') {\n        end += 1;\n      }\n    });\n    return start === 0 && end === 0 ? -1 : start === 1 && end === 0 ? 0 : 1;\n  }\n  // canvas.onmousedown = mouse_down\n\n  let is_dragging = false;\n  let startX;\n  let startY;\n  let dragNode;\n  let dragPos;\n  canvas.addEventListener('mousedown', function (e) {\n    dragPos = getMousePosition(canvas, e);\n    startX = dragPos[0];\n    startY = dragPos[1];\n    Object.keys(g.nodeHitBoxes).forEach(function (el) {\n      let hitbox = g.nodeHitBoxes[el];\n      if (dragPos[0] > hitbox[2] && dragPos[0] < hitbox[3] && dragPos[1] > hitbox[0] && dragPos[1] < hitbox[1]) {\n        dragNode = g.nodes.find(node => node.name === el);\n        is_dragging = true;\n        return;\n      }\n    });\n  });\n  let mouse_up = function (e) {\n    e.preventDefault();\n    if (!is_dragging) {\n      return;\n    }\n    is_dragging = false;\n  };\n  let mouse_out = function (e) {\n    e.preventDefault();\n    if (!is_dragging) {\n      return;\n    }\n    is_dragging = false;\n  };\n  let mouse_move = function (e) {\n    if (!is_dragging) {\n      return;\n    } else {\n      e.preventDefault();\n      let dragPos = getMousePosition(canvas, e);\n      // let mouseX = parseInt(e.clientX)\n      // let mouseY = parseInt(e.clientY)\n\n      let dx = dragPos[0] - startX;\n      let dy = dragPos[1] - startY;\n      dragNode.pos[0] += dx;\n      dragNode.pos[1] += dy;\n      g.draw(ctx);\n      startX = dragPos[0];\n      startY = dragPos[1];\n      g.paths.forEach(function (ele) {\n        ele.distance = ele.calculateDistance();\n        ele.weight = ele.calculateWeight();\n        ele.associations();\n      });\n      g.buildHitBoxes();\n    }\n  };\n  canvas.onmouseup = mouse_up;\n  canvas.onmouseout = mouse_out;\n  canvas.onmousemove = mouse_move;\n  const openModalButtons = document.querySelectorAll('[data-modal-target]');\n  const closeModalButtons = document.querySelectorAll('[data-close-button]');\n  const overlay = document.getElementById('overlay');\n  overlay.addEventListener('click', () => {\n    const modals = document.querySelectorAll('.modal.active');\n    modals.forEach(modal => {\n      closeModal();\n    });\n  });\n  openModalButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      const modal = document.querySelector(button.dataset.modalTarget);\n      openModal(modal);\n    });\n  });\n  closeModalButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      const modal = button.closest('.modal');\n      closeModal(modal);\n    });\n  });\n  function openModal(modal) {\n    if (modal == null) return;\n    modal.classList.add('active');\n    overlay.classList.add('active');\n  }\n  function closeModal(modal) {\n    if (modal == null) return;\n    modal.classList.remove('active');\n    overlay.classList.remove('active');\n  }\n  let slider = document.getElementById(\"myRange\");\n  slider.oninput = function () {\n    g.delay = 1000 - this.value;\n  };\n  canvas.addEventListener(\"click\", e => {\n    g.pathHitBoxes.forEach(function (node) {\n      if (this.ctx.isPointInStroke(node, 0, 0)) {\n        console.log(\"hello\");\n      }\n    });\n  });\n});\nwindow.Node = Node;\nwindow.Path = Path;\nwindow.Graph = Graph;\nwindow.Algorithm = Algorithm;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/algorithm.js":
/*!**********************************!*\
  !*** ./src/scripts/algorithm.js ***!
  \**********************************/
/***/ (function(module) {

eval("function Algorithm() {\n  this.graph = g;\n  this.nodes = this.graph.nodes;\n  this.paths = this.graph.paths;\n  this.startNode = this.nodes.find(node => node.selected === 'start');\n  if (!this.startNode) {\n    this.startNode = this.nodes[0];\n    this.nodes[0].selected = 'start';\n  }\n  this.endNode = this.nodes.find(node => node.selected === 'end');\n  if (!this.endNode) {\n    this.endNode = this.nodes[this.nodes.length - 1];\n    this.nodes[this.nodes.length - 1].selected = 'end';\n  }\n  this.visitedNodes = [];\n}\nAlgorithm.prototype.determinePathing = function () {\n  let map = this.buildMap();\n  let currentNode = this.startNode.name;\n  let unvisitedNodes = Object.keys(map);\n  let shortestDist = {};\n  let path = {};\n  Object.keys(map).forEach(function (el) {\n    path[el] = [];\n  });\n  this.nodes.forEach(function (node) {\n    shortestDist[node.name] = Infinity;\n  });\n  shortestDist[currentNode] = 0;\n  path[currentNode] = [0, currentNode];\n  while (unvisitedNodes.length > 0) {\n    currentNode = Object.entries(shortestDist).filter(_ref => {\n      let [key] = _ref;\n      return unvisitedNodes.includes(key);\n    }).sort((a, b) => a[1] - b[1])[0][0];\n    this.visitedNodes.push(currentNode);\n    unvisitedNodes = unvisitedNodes.filter(el => el !== currentNode);\n    let distToCurrent = shortestDist[currentNode];\n    Object.keys(map[currentNode]).forEach(function (el) {\n      if (shortestDist[el] > map[currentNode][el] + distToCurrent) {\n        shortestDist[el] = map[currentNode][el] + distToCurrent;\n      }\n      if (path[el].length === 0) {\n        path[el] = [map[currentNode][el] + distToCurrent, currentNode];\n      }\n    });\n  }\n  this.path = path;\n};\nAlgorithm.prototype.buildMap = function () {\n  let map = {};\n  for (let i = 0; i < this.nodes.length; i++) {\n    if (!map[this.nodes[i].name]) {\n      map[this.nodes[i].name] = this.nodes[i].neighbors;\n    }\n  }\n  return map;\n};\nAlgorithm.prototype.shortestPath = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  let currentNode = this.endNode.name;\n  let shortest = [];\n  while (currentNode !== this.startNode.name) {\n    shortest.push(currentNode);\n    currentNode = this.path[currentNode][1];\n  }\n  if (alpha.indexOf(this.startNode.name) > alpha.indexOf(this.endNode.name)) {\n    return shortest.concat(this.startNode.name);\n  } else {\n    return shortest.concat(this.startNode.name).reverse();\n  }\n};\nAlgorithm.prototype.animateNodes = function (ctx) {\n  let visitedNodes = this.visitedNodes.slice(0);\n  let that = this;\n  return new Promise(resolve => {\n    setInterval(_animateNodes, this.graph.delay);\n    function _animateNodes() {\n      if (visitedNodes.length > 0) {\n        let first = visitedNodes.shift();\n        that.nodes.find(node => node.name === first).status = 'visited';\n        that.graph.draw(ctx);\n      } else {\n        resolve();\n      }\n    }\n  });\n};\nAlgorithm.prototype.animatePath = async function (ctx) {\n  await this.animateNodes(ctx);\n  let that = this;\n  let shortest = that.shortestPath();\n  for (let i = 0; i < shortest.length - 1; i++) {\n    current = that.paths.find(path => path.parentNode.name === shortest[i] && path.childNode.name === shortest[i + 1]);\n    current.status = 'shortest';\n    that.graph.draw(ctx);\n  }\n};\nmodule.exports = Algorithm;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/algorithm.js\n");

/***/ }),

/***/ "./src/scripts/graph.js":
/*!******************************!*\
  !*** ./src/scripts/graph.js ***!
  \******************************/
/***/ (function(module) {

eval("function Graph() {\n  this.nodes = [];\n  // this.numNodes = numNodes\n  this.nodeHitBoxes = {};\n  this.startingNodes = [[100, 175], [200, 400], [400, 75], [550, 475], [750, 100], [850, 400]];\n  this.paths = [];\n  this.pathHitBoxes = [];\n  this.delay = 500;\n  this.placeNodes();\n  this.placePaths();\n  this.buildHitBoxes();\n  this.draw(ctx);\n}\nGraph.prototype.placeNodes = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  for (let i = 0; i < this.startingNodes.length; i++) {\n    this.nodes.push(new Node(alpha[i], this.startingNodes[i]));\n  }\n};\nGraph.prototype.buildHitBoxes = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  for (let i = 0; i < this.startingNodes.length; i++) {\n    this.nodeHitBoxes[alpha[i]] = [this.startingNodes[i][1] - 13, this.startingNodes[i][1] + 13, this.startingNodes[i][0] - 13, this.startingNodes[i][0] + 13];\n  }\n};\nGraph.prototype.placePaths = function () {\n  console.log(this);\n  let nodePaths = [[this.nodes[0], this.nodes[1], 'none'], [this.nodes[0], this.nodes[2], 'none'], [this.nodes[1], this.nodes[2], 'none'], [this.nodes[1], this.nodes[3], 'none'], [this.nodes[2], this.nodes[3], 'none'], [this.nodes[2], this.nodes[4], 'none'], [this.nodes[3], this.nodes[4], 'none'], [this.nodes[3], this.nodes[5], 'none'], [this.nodes[4], this.nodes[5], 'none']];\n  let that = this;\n  nodePaths.forEach(function (nodePair) {\n    that.paths.push(new Path(nodePair[0], nodePair[1]));\n  });\n};\nGraph.prototype.placePathHBs = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  for (let i = 0; i < this.paths.length; i++) {\n    this.pathHitBoxes.push(pathBox(alpha[i], i));\n  }\n};\nfunction pathBox(name, i) {\n  name = new Path2D();\n  name.moveTo(g.paths[i].startPos[0], g.paths[i].startPos[1]);\n  name.lineTo(g.paths[i].endPos[0], g.paths[i].endPos[1]);\n  ctx.lineWidth = 8;\n  ctx.strokeStyle = \"red\";\n  ctx.stroke(name);\n  return name;\n}\nGraph.prototype.draw = function (ctx) {\n  ctx.clearRect(0, 0, 970, 600);\n  ctx.fillStyle = \"#fbfbfb\";\n  ctx.fillRect(0, 0, 970, 600);\n  this.paths.forEach(function (path) {\n    path.draw(ctx);\n  });\n  for (let i = 0; i < this.nodes.length; i++) {\n    this.nodes[i].draw(ctx);\n  }\n  this.nodes.forEach(function (node) {\n    node.draw(ctx);\n  });\n  this.annotate(ctx);\n};\nGraph.prototype.clearSelected = function () {\n  Object.keys(g.nodes).forEach(function (element) {\n    g.nodes[element].selected = null;\n  });\n};\nGraph.prototype.annotate = function (ctx) {\n  this.nodes.forEach(function (node) {\n    ctx.lineWidth = 1.5;\n    ctx.strokeStyle = \"black\";\n    ctx.strokeText(`${node.name}`, node.pos[0] + 20, node.pos[1] + 20);\n  });\n};\nmodule.exports = Graph;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/graph.js\n");

/***/ }),

/***/ "./src/scripts/node.js":
/*!*****************************!*\
  !*** ./src/scripts/node.js ***!
  \*****************************/
/***/ (function(module) {

eval("function Node(name, pos) {\n  this.name = name;\n  this.pos = pos;\n  this.radius = 10;\n  this.neighbors = {};\n  this.status = 'unvisited';\n  this.selected = null;\n  // this.size = size             used for creating a larger graph\n}\n\nNode.prototype.draw = function (ctx) {\n  const a = 2 * Math.PI / 6;\n  const r = 13;\n  ctx.beginPath();\n  for (var i = 0; i < 6; i++) {\n    ctx.lineTo(this.pos[0] + r * Math.cos(a * i), this.pos[1] + r * Math.sin(a * i));\n  }\n  if (this.selected === null) {\n    ctx.strokeStyle = \"black\";\n    ctx.lineWidth = 3;\n  } else if (this.selected === 'start') {\n    ctx.strokeStyle = \"green\";\n    ctx.lineWidth = 7;\n  } else if (this.selected === 'end') {\n    ctx.strokeStyle = \"red\";\n    ctx.lineWidth = 7;\n  }\n  if (this.status !== 'visited') {\n    ctx.fillStyle = 'white';\n  } else {\n    ctx.fillStyle = '#0288d1';\n  }\n  ctx.closePath();\n  ctx.stroke();\n  ctx.fill();\n};\nmodule.exports = Node;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9ub2RlLmpzLmpzIiwibmFtZXMiOlsiTm9kZSIsIm5hbWUiLCJwb3MiLCJyYWRpdXMiLCJuZWlnaGJvcnMiLCJzdGF0dXMiLCJzZWxlY3RlZCIsInByb3RvdHlwZSIsImRyYXciLCJjdHgiLCJhIiwiTWF0aCIsIlBJIiwiciIsImJlZ2luUGF0aCIsImkiLCJsaW5lVG8iLCJjb3MiLCJzaW4iLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImZpbGxTdHlsZSIsImNsb3NlUGF0aCIsInN0cm9rZSIsImZpbGwiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXRoLW9wdGltaXplci8uL3NyYy9zY3JpcHRzL25vZGUuanM/Zjk0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBOb2RlKG5hbWUsIHBvcyl7ICAgXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHRoaXMucG9zID0gcG9zXG4gICAgdGhpcy5yYWRpdXMgPSAxMFxuICAgIHRoaXMubmVpZ2hib3JzID0ge31cbiAgICB0aGlzLnN0YXR1cyA9ICd1bnZpc2l0ZWQnXG4gICAgdGhpcy5zZWxlY3RlZCA9IG51bGxcbiAgICAvLyB0aGlzLnNpemUgPSBzaXplICAgICAgICAgICAgIHVzZWQgZm9yIGNyZWF0aW5nIGEgbGFyZ2VyIGdyYXBoXG59XG5cbk5vZGUucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgpe1xuICAgIGNvbnN0IGEgPSAyICogTWF0aC5QSSAvIDY7XG4gICAgY29uc3QgciA9IDEzO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICBjdHgubGluZVRvKHRoaXMucG9zWzBdICsgciAqIE1hdGguY29zKGEgKiBpKSwgdGhpcy5wb3NbMV0gKyByICogTWF0aC5zaW4oYSAqIGkpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2VsZWN0ZWQgPT09IG51bGwpe1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAzO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZCA9PT0gJ3N0YXJ0Jyl7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiZ3JlZW5cIjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDc7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGVkID09PSAnZW5kJyl7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwicmVkXCI7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSA3O1xuICAgIH0gXG4gICAgaWYgKHRoaXMuc3RhdHVzICE9PSAndmlzaXRlZCcpe1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJ1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnIzAyODhkMSdcbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBjdHguZmlsbCgpXG4gICAgXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsSUFBSSxDQUFDQyxJQUFJLEVBQUVDLEdBQUcsRUFBQztFQUNwQixJQUFJLENBQUNELElBQUksR0FBR0EsSUFBSTtFQUNoQixJQUFJLENBQUNDLEdBQUcsR0FBR0EsR0FBRztFQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEVBQUU7RUFDaEIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0VBQ25CLElBQUksQ0FBQ0MsTUFBTSxHQUFHLFdBQVc7RUFDekIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSTtFQUNwQjtBQUNKOztBQUVBTixJQUFJLENBQUNPLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHLFVBQVNDLEdBQUcsRUFBQztFQUMvQixNQUFNQyxDQUFDLEdBQUcsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLE1BQU1DLENBQUMsR0FBRyxFQUFFO0VBQ1pKLEdBQUcsQ0FBQ0ssU0FBUyxFQUFFO0VBQ2YsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtJQUN4Qk4sR0FBRyxDQUFDTyxNQUFNLENBQUMsSUFBSSxDQUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUdXLENBQUMsR0FBR0YsSUFBSSxDQUFDTSxHQUFHLENBQUNQLENBQUMsR0FBR0ssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUdXLENBQUMsR0FBR0YsSUFBSSxDQUFDTyxHQUFHLENBQUNSLENBQUMsR0FBR0ssQ0FBQyxDQUFDLENBQUM7RUFDcEY7RUFDQSxJQUFJLElBQUksQ0FBQ1QsUUFBUSxLQUFLLElBQUksRUFBQztJQUN2QkcsR0FBRyxDQUFDVSxXQUFXLEdBQUcsT0FBTztJQUN6QlYsR0FBRyxDQUFDVyxTQUFTLEdBQUcsQ0FBQztFQUNyQixDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUNkLFFBQVEsS0FBSyxPQUFPLEVBQUM7SUFDakNHLEdBQUcsQ0FBQ1UsV0FBVyxHQUFHLE9BQU87SUFDekJWLEdBQUcsQ0FBQ1csU0FBUyxHQUFHLENBQUM7RUFDckIsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDZCxRQUFRLEtBQUssS0FBSyxFQUFDO0lBQy9CRyxHQUFHLENBQUNVLFdBQVcsR0FBRyxLQUFLO0lBQ3ZCVixHQUFHLENBQUNXLFNBQVMsR0FBRyxDQUFDO0VBQ3JCO0VBQ0EsSUFBSSxJQUFJLENBQUNmLE1BQU0sS0FBSyxTQUFTLEVBQUM7SUFDMUJJLEdBQUcsQ0FBQ1ksU0FBUyxHQUFHLE9BQU87RUFDM0IsQ0FBQyxNQUFNO0lBQ0haLEdBQUcsQ0FBQ1ksU0FBUyxHQUFHLFNBQVM7RUFDN0I7RUFDQVosR0FBRyxDQUFDYSxTQUFTLEVBQUU7RUFDZmIsR0FBRyxDQUFDYyxNQUFNLEVBQUU7RUFDWmQsR0FBRyxDQUFDZSxJQUFJLEVBQUU7QUFFZCxDQUFDO0FBR0RDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHMUIsSUFBSSJ9\n//# sourceURL=webpack-internal:///./src/scripts/node.js\n");

/***/ }),

/***/ "./src/scripts/path.js":
/*!*****************************!*\
  !*** ./src/scripts/path.js ***!
  \*****************************/
/***/ (function(module) {

eval("function Path(parentNode, childNode, traffic) {\n  this.parentNode = parentNode;\n  this.childNode = childNode;\n  this.startPos = this.getStartPos();\n  this.endPos = this.getEndPos();\n  this.delta = [Math.abs(this.startPos[0] - this.endPos[0]), Math.abs(this.startPos[1] - this.endPos[1])];\n  this.distance = this.calculateDistance();\n  this.traffic = 'none';\n  this.weight = this.calculateWeight();\n  this.status = 'none';\n  this.associations();\n}\nPath.prototype.getStartPos = function () {\n  return this.parentNode.pos;\n};\nPath.prototype.getEndPos = function () {\n  return this.childNode.pos;\n};\nPath.prototype.calculateDistance = function () {\n  return Math.sqrt(Math.pow(this.startPos[0] - this.endPos[0], 2) + Math.pow(this.startPos[1] + this.endPos[1], 2));\n};\nPath.prototype.calculateWeight = function () {\n  if (this.traffic === 'light') {\n    return Math.floor(this.distance * 1.2);\n  } else if (this.traffic === 'medium') {\n    return Math.floor(this.distance * 1.2);\n  } else if (this.traffic === 'heavy') {\n    return Math.floor(this.distance * 1.8);\n  } else {\n    return Math.floor(this.distance);\n  }\n};\nPath.prototype.draw = function (ctx) {\n  ctx.beginPath();\n  if (this.traffic === 'light') {\n    ctx.strokeStyle = 'yellow';\n    ctx.lineWidth = 4;\n  } else if (this.traffic === 'medium') {\n    ctx.strokeStyle = 'orange';\n    ctx.lineWidth = 4;\n  } else if (this.traffic === 'heavy') {\n    ctx.strokeStyle = 'red';\n    ctx.lineWidth = 4;\n  } else if (this.status === 'shortest') {\n    ctx.strokeStyle = '#0288d1';\n    ctx.lineWidth = 8;\n  } else {\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = 1;\n  }\n  ctx.moveTo(this.startPos[0], this.startPos[1]);\n  ctx.lineTo(this.endPos[0], this.endPos[1]);\n  ctx.stroke();\n};\nPath.prototype.associations = function () {\n  this.parentNode.neighbors[this.childNode.name] = this.weight;\n  this.childNode.neighbors[this.parentNode.name] = this.weight;\n};\nmodule.exports = Path;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9wYXRoLmpzLmpzIiwibmFtZXMiOlsiUGF0aCIsInBhcmVudE5vZGUiLCJjaGlsZE5vZGUiLCJ0cmFmZmljIiwic3RhcnRQb3MiLCJnZXRTdGFydFBvcyIsImVuZFBvcyIsImdldEVuZFBvcyIsImRlbHRhIiwiTWF0aCIsImFicyIsImRpc3RhbmNlIiwiY2FsY3VsYXRlRGlzdGFuY2UiLCJ3ZWlnaHQiLCJjYWxjdWxhdGVXZWlnaHQiLCJzdGF0dXMiLCJhc3NvY2lhdGlvbnMiLCJwcm90b3R5cGUiLCJwb3MiLCJzcXJ0IiwicG93IiwiZmxvb3IiLCJkcmF3IiwiY3R4IiwiYmVnaW5QYXRoIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJuZWlnaGJvcnMiLCJuYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF0aC1vcHRpbWl6ZXIvLi9zcmMvc2NyaXB0cy9wYXRoLmpzPzY1YjkiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gUGF0aCAocGFyZW50Tm9kZSwgY2hpbGROb2RlLCB0cmFmZmljKXtcbiAgICB0aGlzLnBhcmVudE5vZGUgPSBwYXJlbnROb2RlXG4gICAgdGhpcy5jaGlsZE5vZGUgPSBjaGlsZE5vZGVcbiAgICB0aGlzLnN0YXJ0UG9zID0gdGhpcy5nZXRTdGFydFBvcygpXG4gICAgdGhpcy5lbmRQb3MgPSB0aGlzLmdldEVuZFBvcygpXG4gICAgdGhpcy5kZWx0YSA9IFtNYXRoLmFicyh0aGlzLnN0YXJ0UG9zWzBdIC0gdGhpcy5lbmRQb3NbMF0pLCBNYXRoLmFicyh0aGlzLnN0YXJ0UG9zWzFdIC0gdGhpcy5lbmRQb3NbMV0pXVxuICAgIHRoaXMuZGlzdGFuY2UgPSB0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKClcbiAgICB0aGlzLnRyYWZmaWMgPSAnbm9uZSdcbiAgICB0aGlzLndlaWdodCA9IHRoaXMuY2FsY3VsYXRlV2VpZ2h0KClcbiAgICB0aGlzLnN0YXR1cyA9ICdub25lJ1xuICAgIHRoaXMuYXNzb2NpYXRpb25zKClcbn1cblxuUGF0aC5wcm90b3R5cGUuZ2V0U3RhcnRQb3MgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLnBhcmVudE5vZGUucG9zXG59XG5cblBhdGgucHJvdG90eXBlLmdldEVuZFBvcyA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGROb2RlLnBvc1xufVxuXG5QYXRoLnByb3RvdHlwZS5jYWxjdWxhdGVEaXN0YW5jZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdygodGhpcy5zdGFydFBvc1swXSAtIHRoaXMuIGVuZFBvc1swXSksMikgKyBNYXRoLnBvdygodGhpcy4gc3RhcnRQb3NbMV0gKyB0aGlzLmVuZFBvc1sxXSksMikpXG59XG5cblBhdGgucHJvdG90eXBlLmNhbGN1bGF0ZVdlaWdodCA9IGZ1bmN0aW9uICgpe1xuICAgIGlmICh0aGlzLnRyYWZmaWMgPT09ICdsaWdodCcpe1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLmRpc3RhbmNlICogMS4yIClcbiAgICB9ZWxzZSBpZiAodGhpcy50cmFmZmljID09PSAnbWVkaXVtJyl7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMuZGlzdGFuY2UgKiAxLjIgKVxuICAgIH1lbHNlIGlmICh0aGlzLnRyYWZmaWMgPT09ICdoZWF2eScpe1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLmRpc3RhbmNlICogMS44IClcbiAgICB9ZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMuZGlzdGFuY2UpXG4gICAgfVxufVxuXG5QYXRoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oY3R4KXtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgaWYgKHRoaXMudHJhZmZpYyA9PT0gJ2xpZ2h0Jyl7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICd5ZWxsb3cnXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSA0XG4gICAgfWVsc2UgaWYgKHRoaXMudHJhZmZpYyA9PT0gJ21lZGl1bScpe1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnb3JhbmdlJ1xuICAgICAgICBjdHgubGluZVdpZHRoID0gNFxuICAgIH0gZWxzZSBpZiAodGhpcy50cmFmZmljID09PSAnaGVhdnknKXtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3JlZCdcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDRcbiAgICB9ICBlbHNlIGlmICh0aGlzLnN0YXR1cyA9PT0gJ3Nob3J0ZXN0Jyl7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjMDI4OGQxJ1xuICAgICAgICBjdHgubGluZVdpZHRoID0gOFxuICAgIH0gZWxzZSB7IFxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnYmxhY2snXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAxXG4gICAgfVxuICAgIGN0eC5tb3ZlVG8odGhpcy5zdGFydFBvc1swXSwgdGhpcy5zdGFydFBvc1sxXSk7XG4gICAgY3R4LmxpbmVUbyh0aGlzLmVuZFBvc1swXSwgdGhpcy5lbmRQb3NbMV0pO1xuICAgIGN0eC5zdHJva2UoKTtcbn1cblxuUGF0aC5wcm90b3R5cGUuYXNzb2NpYXRpb25zID0gZnVuY3Rpb24gKCl7XG4gICAgdGhpcy5wYXJlbnROb2RlLm5laWdoYm9yc1t0aGlzLmNoaWxkTm9kZS5uYW1lXSA9IHRoaXMud2VpZ2h0XG4gICAgdGhpcy5jaGlsZE5vZGUubmVpZ2hib3JzW3RoaXMucGFyZW50Tm9kZS5uYW1lXSA9IHRoaXMud2VpZ2h0XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGF0aCJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsSUFBSSxDQUFFQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFDO0VBQzFDLElBQUksQ0FBQ0YsVUFBVSxHQUFHQSxVQUFVO0VBQzVCLElBQUksQ0FBQ0MsU0FB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\n//# sourceURL=webpack-internal:///./src/scripts/path.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXRoLW9wdGltaXplci8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;