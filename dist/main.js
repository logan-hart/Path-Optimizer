/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const Node = __webpack_require__(/*! ./scripts/node.js */ \"./src/scripts/node.js\");\nconst Path = __webpack_require__(/*! ./scripts/path.js */ \"./src/scripts/path.js\");\nconst Graph = __webpack_require__(/*! ./scripts/graph.js */ \"./src/scripts/graph.js\");\nconst Algorithm = __webpack_require__(/*! ./scripts/algorithm.js */ \"./src/scripts/algorithm.js\");\nconst Legend = __webpack_require__(/*! ./scripts/legend.js */ \"./src/scripts/legend.js\");\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const graphcanvas = document.getElementById(\"graphcanvas\");\n  const legendcanvas = document.getElementById(\"legendcanvas\");\n  const ctx = graphcanvas.getContext(\"2d\");\n  const ctx2 = legendcanvas.getContext(\"2d\");\n  const startButton = document.getElementById('startbutton');\n  const resetButton = document.getElementById('resetbutton');\n  window.ctx = ctx;\n  window.Node = Node;\n  window.Path = Path;\n  window.Graph = Graph;\n  window.Algorithm = Algorithm;\n  graphcanvas.width = 940;\n  graphcanvas.height = 600;\n  legendcanvas.width = 293;\n  legendcanvas.height = 600;\n  ctx.fillRect(0, 0, 970, 600);\n  ctx.font = \"20px helvetica\";\n  ctx2.fillStyle = \"#fbfbfb\";\n  ctx2.fillRect(0, 0, 970, 600);\n  g = new Graph();\n  g.draw(ctx);\n  l = new Legend();\n  startButton.addEventListener('click', e => {\n    e.preventDefault();\n    algo = new Algorithm();\n    algo.paths.forEach(function (el) {\n      el.status = 'none';\n    });\n    algo.determinePathing();\n    algo.animateNodes(ctx);\n    algo.animatePath(ctx);\n    startButton.disabled = true;\n    setTimeout(function () {\n      startButton.disabled = false;\n    }, g.delay * 8);\n    resetButton.disabled = true;\n    setTimeout(function () {\n      resetButton.disabled = false;\n    }, g.delay * 8);\n  });\n  resetButton.addEventListener('click', e => {\n    e.preventDefault();\n    algo.nodes.forEach(function (el) {\n      el.status = \"unvisited\";\n    });\n    algo.paths.forEach(function (el) {\n      el.traffic = 'none';\n      el.status = 'none';\n    });\n    algo.graph.draw(ctx);\n  });\n  function getMousePosition(graphcanvas, event) {\n    let rect = graphcanvas.getBoundingClientRect();\n    let x = event.clientX - rect.left;\n    let y = event.clientY - rect.top;\n    return [x, y];\n  }\n  graphcanvas.addEventListener(\"click\", function (e) {\n    let pos = getMousePosition(graphcanvas, e);\n    Object.keys(g.nodeHitBoxes).forEach(function (el) {\n      let hitbox = g.nodeHitBoxes[el];\n      if (pos[0] > hitbox[2] && pos[0] < hitbox[3] && pos[1] > hitbox[0] && pos[1] < hitbox[1]) {\n        let found = g.nodes.find(node => node.name === el);\n        let result = selectedSpaceship();\n        if (result === -1) {\n          found.selected = 'start';\n        } else if (result === 0 && found.selected !== 'start') {\n          found.selected = 'end';\n        } else {\n          g.clearSelected();\n        }\n        g.draw(ctx);\n      }\n    });\n  });\n  function selectedSpaceship() {\n    let start = 0;\n    let end = 0;\n    Object.keys(g.nodes).forEach(function (element) {\n      let newVar = g.nodes[element];\n      if (newVar.selected === 'start') {\n        start += 1;\n      } else if (newVar.selected === 'end') {\n        end += 1;\n      }\n    });\n    return start === 0 && end === 0 ? -1 : start === 1 && end === 0 ? 0 : 1;\n  }\n  graphcanvas.addEventListener(\"click\", e => {\n    let pos = getMousePosition(graphcanvas, e);\n    let trafficStatus = ['none', 'light', 'medium', 'heavy'];\n    let inNode;\n    Object.keys(g.nodeHitBoxes).forEach(function (el) {\n      let hitbox = g.nodeHitBoxes[el];\n      if (pos[0] > hitbox[2] && pos[0] < hitbox[3] && pos[1] > hitbox[0] && pos[1] < hitbox[1]) inNode = true;\n    });\n    g.pathHitBoxes.forEach(function (path) {\n      if (this.ctx.isPointInStroke(path, e.offsetX, e.offsetY) && !inNode) {\n        let currentPath = g.paths[g.pathHitBoxes.indexOf(path)];\n        let currentTraffic = trafficStatus.indexOf(currentPath.traffic);\n        currentPath.traffic = trafficStatus[currentTraffic + 1];\n        currentPath.calculateWeight();\n        g.draw(ctx);\n      }\n    });\n  });\n  let is_dragging = false;\n  let startX;\n  let startY;\n  let dragNode;\n  let dragPos;\n  graphcanvas.addEventListener('mousedown', function (e) {\n    dragPos = getMousePosition(graphcanvas, e);\n    startX = dragPos[0];\n    startY = dragPos[1];\n    Object.keys(g.nodeHitBoxes).forEach(function (el) {\n      let hitbox = g.nodeHitBoxes[el];\n      if (dragPos[0] > hitbox[2] && dragPos[0] < hitbox[3] && dragPos[1] > hitbox[0] && dragPos[1] < hitbox[1]) {\n        dragNode = g.nodes.find(node => node.name === el);\n        is_dragging = true;\n        return;\n      }\n    });\n  });\n  let mouse_up = function (e) {\n    e.preventDefault();\n    if (!is_dragging) {\n      return;\n    }\n    is_dragging = false;\n  };\n  let mouse_out = function (e) {\n    e.preventDefault();\n    if (!is_dragging) {\n      return;\n    }\n    is_dragging = false;\n  };\n  let mouse_move = function (e) {\n    if (!is_dragging) {\n      return;\n    } else {\n      e.preventDefault();\n      let dragPos = getMousePosition(graphcanvas, e);\n      // let mouseX = parseInt(e.clientX)\n      // let mouseY = parseInt(e.clientY)\n\n      let dx = dragPos[0] - startX;\n      let dy = dragPos[1] - startY;\n      dragNode.pos[0] += dx;\n      dragNode.pos[1] += dy;\n      g.draw(ctx);\n      startX = dragPos[0];\n      startY = dragPos[1];\n      g.paths.forEach(function (ele) {\n        ele.distance = ele.calculateDistance();\n        ele.weight = ele.calculateWeight();\n        ele.associations();\n      });\n      g.buildHitBoxes();\n    }\n  };\n  graphcanvas.onmouseup = mouse_up;\n  graphcanvas.onmouseout = mouse_out;\n  graphcanvas.onmousemove = mouse_move;\n  const slider = document.getElementById(\"myRange\");\n  slider.oninput = function () {\n    g.delay = 1000 - this.value;\n  };\n  const openModalButtons = document.querySelectorAll('[data-modal-target]');\n  const closeModalButtons = document.querySelectorAll('[data-close-button]');\n  const overlay = document.getElementById('overlay');\n  overlay.addEventListener('click', () => {\n    const modals = document.querySelectorAll('.modal.active');\n    modals.forEach(modal => {\n      closeModal();\n    });\n  });\n  openModalButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      const modal = document.querySelector(button.dataset.modalTarget);\n      openModal(modal);\n    });\n  });\n  closeModalButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      const modal = button.closest('.modal');\n      closeModal(modal);\n    });\n  });\n  function openModal(modal) {\n    if (modal == null) return;\n    modal.classList.add('active');\n    overlay.classList.add('active');\n  }\n  function closeModal(modal) {\n    if (modal == null) return;\n    modal.classList.remove('active');\n    overlay.classList.remove('active');\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/algorithm.js":
/*!**********************************!*\
  !*** ./src/scripts/algorithm.js ***!
  \**********************************/
/***/ (function(module) {

eval("function Algorithm() {\n  this.graph = g;\n  this.nodes = this.graph.nodes;\n  this.paths = this.graph.paths;\n  this.startNode = this.nodes.find(node => node.selected === 'start');\n  if (!this.startNode) {\n    this.startNode = this.nodes[0];\n    this.nodes[0].selected = 'start';\n  }\n  this.endNode = this.nodes.find(node => node.selected === 'end');\n  if (!this.endNode) {\n    this.endNode = this.nodes[this.nodes.length - 1];\n    this.nodes[this.nodes.length - 1].selected = 'end';\n  }\n  this.visitedNodes = [];\n}\nAlgorithm.prototype.determinePathing = function () {\n  let map = this.buildMap();\n  let currentNode = this.startNode.name;\n  let unvisitedNodes = Object.keys(map);\n  let shortestDist = {};\n  let path = {};\n  Object.keys(map).forEach(function (el) {\n    path[el] = [];\n  });\n  this.nodes.forEach(function (node) {\n    shortestDist[node.name] = Infinity;\n  });\n  shortestDist[currentNode] = 0;\n  path[currentNode] = [0, currentNode];\n  while (unvisitedNodes.length > 0) {\n    currentNode = Object.entries(shortestDist).filter(_ref => {\n      let [key] = _ref;\n      return unvisitedNodes.includes(key);\n    }).sort((a, b) => a[1] - b[1])[0][0];\n    this.visitedNodes.push(currentNode);\n    unvisitedNodes = unvisitedNodes.filter(el => el !== currentNode);\n    let distToCurrent = shortestDist[currentNode];\n    Object.keys(map[currentNode]).forEach(function (el) {\n      if (shortestDist[el] > map[currentNode][el] + distToCurrent) {\n        shortestDist[el] = map[currentNode][el] + distToCurrent;\n      }\n      if (path[el].length === 0) {\n        path[el] = [map[currentNode][el] + distToCurrent, currentNode];\n      }\n    });\n  }\n  this.path = path;\n};\nAlgorithm.prototype.buildMap = function () {\n  let map = {};\n  for (let i = 0; i < this.nodes.length; i++) {\n    if (!map[this.nodes[i].name]) {\n      map[this.nodes[i].name] = this.nodes[i].neighbors;\n    }\n  }\n  return map;\n};\nAlgorithm.prototype.shortestPath = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  let currentNode = this.endNode.name;\n  let shortest = [];\n  while (currentNode !== this.startNode.name) {\n    shortest.push(currentNode);\n    currentNode = this.path[currentNode][1];\n  }\n  if (alpha.indexOf(this.startNode.name) > alpha.indexOf(this.endNode.name)) {\n    return shortest.concat(this.startNode.name);\n  } else {\n    return shortest.concat(this.startNode.name).reverse();\n  }\n};\nAlgorithm.prototype.animateNodes = function (ctx) {\n  let visitedNodes = this.visitedNodes.slice(0);\n  let that = this;\n  return new Promise(resolve => {\n    setInterval(_animateNodes, this.graph.delay);\n    function _animateNodes() {\n      if (visitedNodes.length > 0) {\n        let first = visitedNodes.shift();\n        that.nodes.find(node => node.name === first).status = 'visited';\n        that.graph.draw(ctx);\n      } else {\n        resolve();\n      }\n    }\n  });\n};\nAlgorithm.prototype.animatePath = async function (ctx) {\n  await this.animateNodes(ctx);\n  let that = this;\n  let shortest = that.shortestPath();\n  for (let i = 0; i < shortest.length - 1; i++) {\n    current = that.paths.find(path => path.parentNode.name === shortest[i] && path.childNode.name === shortest[i + 1]);\n    current.status = 'shortest';\n    that.graph.draw(ctx);\n  }\n};\nmodule.exports = Algorithm;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/algorithm.js\n");

/***/ }),

/***/ "./src/scripts/graph.js":
/*!******************************!*\
  !*** ./src/scripts/graph.js ***!
  \******************************/
/***/ (function(module) {

eval("function Graph() {\n  this.nodes = [];\n  // this.numNodes = numNodes\n  this.nodeHitBoxes = {};\n  this.startingNodes = [[100, 175], [200, 400], [400, 75], [550, 500], [750, 100], [850, 325]];\n  this.paths = [];\n  this.pathHitBoxes = [];\n  this.delay = 500;\n  this.placeNodes();\n  this.placePaths();\n  this.buildHitBoxes();\n}\nGraph.prototype.placeNodes = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  for (let i = 0; i < this.startingNodes.length; i++) {\n    this.nodes.push(new Node(alpha[i], this.startingNodes[i]));\n  }\n};\nGraph.prototype.buildHitBoxes = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  for (let i = 0; i < this.startingNodes.length; i++) {\n    this.nodeHitBoxes[alpha[i]] = [this.startingNodes[i][1] - 13, this.startingNodes[i][1] + 13, this.startingNodes[i][0] - 13, this.startingNodes[i][0] + 13];\n  }\n};\nGraph.prototype.placePaths = function () {\n  console.log(this);\n  let nodePaths = [[this.nodes[0], this.nodes[1], 'none'], [this.nodes[0], this.nodes[2], 'none'], [this.nodes[1], this.nodes[2], 'none'], [this.nodes[1], this.nodes[3], 'none'], [this.nodes[2], this.nodes[3], 'none'], [this.nodes[2], this.nodes[4], 'none'], [this.nodes[3], this.nodes[4], 'none'], [this.nodes[3], this.nodes[5], 'none'], [this.nodes[4], this.nodes[5], 'none']];\n  let that = this;\n  nodePaths.forEach(function (nodePair) {\n    that.paths.push(new Path(nodePair[0], nodePair[1]));\n  });\n};\nGraph.prototype.draw = function (ctx) {\n  ctx.clearRect(0, 0, 970, 600);\n  ctx.fillStyle = \"#fbfbfb\";\n  ctx.fillRect(0, 0, 970, 600);\n  this.placePathHBs();\n  this.paths.forEach(function (path) {\n    path.draw(ctx);\n  });\n  for (let i = 0; i < this.nodes.length; i++) {\n    this.nodes[i].draw(ctx);\n  }\n  this.nodes.forEach(function (node) {\n    node.draw(ctx);\n  });\n  this.annotate(ctx);\n};\nGraph.prototype.placePathHBs = function () {\n  const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  for (let i = 0; i < this.paths.length; i++) {\n    this.pathHitBoxes.push(pathBox(alpha[i], i));\n  }\n};\nfunction pathBox(name, i) {\n  name = new Path2D();\n  name.moveTo(g.paths[i].startPos[0], g.paths[i].startPos[1]);\n  name.lineTo(g.paths[i].endPos[0], g.paths[i].endPos[1]);\n  ctx.lineWidth = 10;\n  ctx.strokeStyle = \"#fbfbfb\";\n  ctx.stroke(name);\n  return name;\n}\nGraph.prototype.annotate = function (ctx) {\n  this.nodes.forEach(function (node) {\n    ctx.lineWidth = 1.5;\n    ctx.strokeStyle = \"black\";\n    ctx.strokeText(`${node.name}`, node.pos[0] + 20, node.pos[1] + 20);\n  });\n};\nGraph.prototype.clearSelected = function () {\n  Object.keys(g.nodes).forEach(function (element) {\n    g.nodes[element].selected = null;\n  });\n};\nmodule.exports = Graph;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9ncmFwaC5qcy5qcyIsIm5hbWVzIjpbIkdyYXBoIiwibm9kZXMiLCJub2RlSGl0Qm94ZXMiLCJzdGFydGluZ05vZGVzIiwicGF0aHMiLCJwYXRoSGl0Qm94ZXMiLCJkZWxheSIsInBsYWNlTm9kZXMiLCJwbGFjZVBhdGhzIiwiYnVpbGRIaXRCb3hlcyIsInByb3RvdHlwZSIsImFscGhhIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwicHVzaCIsIk5vZGUiLCJjb25zb2xlIiwibG9nIiwibm9kZVBhdGhzIiwidGhhdCIsImZvckVhY2giLCJub2RlUGFpciIsIlBhdGgiLCJkcmF3IiwiY3R4IiwiY2xlYXJSZWN0IiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJwbGFjZVBhdGhIQnMiLCJwYXRoIiwibm9kZSIsImFubm90YXRlIiwicGF0aEJveCIsIm5hbWUiLCJQYXRoMkQiLCJtb3ZlVG8iLCJnIiwic3RhcnRQb3MiLCJsaW5lVG8iLCJlbmRQb3MiLCJsaW5lV2lkdGgiLCJzdHJva2VTdHlsZSIsInN0cm9rZSIsInN0cm9rZVRleHQiLCJwb3MiLCJjbGVhclNlbGVjdGVkIiwiT2JqZWN0Iiwia2V5cyIsImVsZW1lbnQiLCJzZWxlY3RlZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL3BhdGgtb3B0aW1pemVyLy4vc3JjL3NjcmlwdHMvZ3JhcGguanM/ODQ1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBHcmFwaCgpe1xuICAgIHRoaXMubm9kZXMgPSBbXVxuICAgIC8vIHRoaXMubnVtTm9kZXMgPSBudW1Ob2Rlc1xuICAgIHRoaXMubm9kZUhpdEJveGVzID0ge31cbiAgICB0aGlzLnN0YXJ0aW5nTm9kZXMgPSBbXG4gICAgICAgIFsgMTAwLCAxNzUgXSxcbiAgICAgICAgWyAyMDAsIDQwMCBdLFxuICAgICAgICBbIDQwMCwgNzUgXSxcbiAgICAgICAgWyA1NTAsIDUwMCBdLFxuICAgICAgICBbIDc1MCwgMTAwIF0sXG4gICAgICAgIFsgODUwLCAzMjUgXV1cbiAgICB0aGlzLnBhdGhzID0gW11cbiAgICB0aGlzLnBhdGhIaXRCb3hlcyA9IFtdXG4gICAgdGhpcy5kZWxheSA9IDUwMFxuICAgIHRoaXMucGxhY2VOb2RlcygpXG4gICAgdGhpcy5wbGFjZVBhdGhzKClcbiAgICB0aGlzLmJ1aWxkSGl0Qm94ZXMoKVxufVxuXG5HcmFwaC5wcm90b3R5cGUucGxhY2VOb2RlcyA9IGZ1bmN0aW9uICgpe1xuICAgIGNvbnN0IGFscGhhID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJy5zcGxpdCgnJylcbiAgICBcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGFydGluZ05vZGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKG5ldyBOb2RlKGFscGhhW2ldLCB0aGlzLnN0YXJ0aW5nTm9kZXNbaV0pKVxuICAgIH1cbn1cblxuR3JhcGgucHJvdG90eXBlLmJ1aWxkSGl0Qm94ZXMgPSBmdW5jdGlvbigpe1xuICAgIGNvbnN0IGFscGhhID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJy5zcGxpdCgnJylcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGFydGluZ05vZGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdGhpcy5ub2RlSGl0Qm94ZXNbYWxwaGFbaV1dID0gW3RoaXMuc3RhcnRpbmdOb2Rlc1tpXVsxXSAtIDEzLCB0aGlzLnN0YXJ0aW5nTm9kZXNbaV1bMV0gKzEzLCB0aGlzLnN0YXJ0aW5nTm9kZXNbaV1bMF0gLTEzLCB0aGlzLnN0YXJ0aW5nTm9kZXNbaV1bMF0gKzEzXVxuICAgIH1cbn1cblxuR3JhcGgucHJvdG90eXBlLnBsYWNlUGF0aHMgPSBmdW5jdGlvbiAoKXtcbiAgICBjb25zb2xlLmxvZyh0aGlzKVxuICAgIGxldCBub2RlUGF0aHMgPVtcbiAgICAgICAgW3RoaXMubm9kZXNbMF0sIHRoaXMubm9kZXNbMV0sICdub25lJ10sXG4gICAgICAgIFt0aGlzLm5vZGVzWzBdLCB0aGlzLm5vZGVzWzJdLCAnbm9uZSddLFxuICAgICAgICBbdGhpcy5ub2Rlc1sxXSwgdGhpcy5ub2Rlc1syXSwgJ25vbmUnXSxcbiAgICAgICAgW3RoaXMubm9kZXNbMV0sIHRoaXMubm9kZXNbM10sICdub25lJ10sXG4gICAgICAgIFt0aGlzLm5vZGVzWzJdLCB0aGlzLm5vZGVzWzNdLCAnbm9uZSddLFxuICAgICAgICBbdGhpcy5ub2Rlc1syXSwgdGhpcy5ub2Rlc1s0XSwgJ25vbmUnXSxcbiAgICAgICAgW3RoaXMubm9kZXNbM10sIHRoaXMubm9kZXNbNF0sICdub25lJ10sXG4gICAgICAgIFt0aGlzLm5vZGVzWzNdLCB0aGlzLm5vZGVzWzVdLCAnbm9uZSddLFxuICAgICAgICBbdGhpcy5ub2Rlc1s0XSwgdGhpcy5ub2Rlc1s1XSwgJ25vbmUnXVxuICAgIF1cbiAgICBsZXQgdGhhdCA9IHRoaXNcbiAgICBub2RlUGF0aHMuZm9yRWFjaCggZnVuY3Rpb24obm9kZVBhaXIpe1xuICAgICAgICB0aGF0LnBhdGhzLnB1c2gobmV3IFBhdGgobm9kZVBhaXJbMF0sIG5vZGVQYWlyWzFdKSlcbiAgICB9KVxufVxuXG5HcmFwaC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGN0eCl7XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCA5NzAsIDYwMClcbiAgICBjdHguZmlsbFN0eWxlID0gXCIjZmJmYmZiXCI7XG4gICAgY3R4LmZpbGxSZWN0KDAsIDAsIDk3MCwgNjAwKTtcbiAgICB0aGlzLnBsYWNlUGF0aEhCcygpXG4gICAgdGhpcy5wYXRocy5mb3JFYWNoKGZ1bmN0aW9uIChwYXRoKXtcbiAgICAgICAgcGF0aC5kcmF3KGN0eClcbiAgICB9KVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ub2Rlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHRoaXMubm9kZXNbaV0uZHJhdyhjdHgpXG4gICAgfVxuICAgIHRoaXMubm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKXtcbiAgICAgICAgbm9kZS5kcmF3KGN0eClcbiAgICB9KVxuXG4gICAgdGhpcy5hbm5vdGF0ZShjdHgpXG59XG5cblxuR3JhcGgucHJvdG90eXBlLnBsYWNlUGF0aEhCcyA9IGZ1bmN0aW9uKCl7XG4gICAgY29uc3QgYWxwaGEgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonLnNwbGl0KCcnKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXRocy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHRoaXMucGF0aEhpdEJveGVzLnB1c2gocGF0aEJveChhbHBoYVtpXSwgaSkpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBwYXRoQm94IChuYW1lLCBpKXtcbiAgICBuYW1lID0gbmV3IFBhdGgyRCgpXG4gICAgbmFtZS5tb3ZlVG8oZy5wYXRoc1tpXS5zdGFydFBvc1swXSwgZy5wYXRoc1tpXS5zdGFydFBvc1sxXSlcbiAgICBuYW1lLmxpbmVUbyhnLnBhdGhzW2ldLmVuZFBvc1swXSwgZy5wYXRoc1tpXS5lbmRQb3NbMV0pXG4gICAgY3R4LmxpbmVXaWR0aCA9IDEwO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiI2ZiZmJmYlwiXG4gICAgY3R4LnN0cm9rZShuYW1lKTtcbiAgICByZXR1cm4gbmFtZVxufVxuXG5HcmFwaC5wcm90b3R5cGUuYW5ub3RhdGUgPSBmdW5jdGlvbiAoY3R4KXtcbiAgICB0aGlzLm5vZGVzLmZvckVhY2goIGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMS41XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiYmxhY2tcIlxuICAgICAgICBjdHguc3Ryb2tlVGV4dChgJHtub2RlLm5hbWV9YCwgbm9kZS5wb3NbMF0gKyAyMCwgbm9kZS5wb3NbMV0gKyAyMCk7XG4gICAgfSlcbn1cblxuR3JhcGgucHJvdG90eXBlLmNsZWFyU2VsZWN0ZWQgPSBmdW5jdGlvbigpe1xuICAgIE9iamVjdC5rZXlzKGcubm9kZXMpLmZvckVhY2ggKGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgZy5ub2Rlc1tlbGVtZW50XS5zZWxlY3RlZCA9IG51bGxcbiAgICB9KVxufVxuXG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IEdyYXBoO1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLEtBQUssR0FBRTtFQUNaLElBQUksQ0FBQ0MsS0FBSyxHQUFHLEVBQUU7RUFDZjtFQUNBLElBQUksQ0FBQ0MsWUFBWSxHQUFHLENBQUMsQ0FBQztFQUN0QixJQUFJLENBQUNDLGFBQWEsR0FBRyxDQUNqQixDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsRUFDWixDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsRUFDWixDQUFFLEdBQUcsRUFBRSxFQUFFLENBQUUsRUFDWCxDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsRUFDWixDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsRUFDWixDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsQ0FBQztFQUNqQixJQUFJLENBQUNDLEtBQUssR0FBRyxFQUFFO0VBQ2YsSUFBSSxDQUFDQyxZQUFZLEdBQUcsRUFBRTtFQUN0QixJQUFJLENBQUNDLEtBQUssR0FBRyxHQUFHO0VBQ2hCLElBQUksQ0FBQ0MsVUFBVSxFQUFFO0VBQ2pCLElBQUksQ0FBQ0MsVUFBVSxFQUFFO0VBQ2pCLElBQUksQ0FBQ0MsYUFBYSxFQUFFO0FBQ3hCO0FBRUFULEtBQUssQ0FBQ1UsU0FBUyxDQUFDSCxVQUFVLEdBQUcsWUFBVztFQUNwQyxNQUFNSSxLQUFLLEdBQUcsNEJBQTRCLENBQUNDLEtBQUssQ0FBQyxFQUFFLENBQUM7RUFFcEQsS0FBSSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsSUFBSSxDQUFDVixhQUFhLENBQUNXLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUM7SUFDOUMsSUFBSSxDQUFDWixLQUFLLENBQUNjLElBQUksQ0FBQyxJQUFJQyxJQUFJLENBQUNMLEtBQUssQ0FBQ0UsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDVixhQUFhLENBQUNVLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDOUQ7QUFDSixDQUFDO0FBRURiLEtBQUssQ0FBQ1UsU0FBUyxDQUFDRCxhQUFhLEdBQUcsWUFBVTtFQUN0QyxNQUFNRSxLQUFLLEdBQUcsNEJBQTRCLENBQUNDLEtBQUssQ0FBQyxFQUFFLENBQUM7RUFDcEQsS0FBSSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsSUFBSSxDQUFDVixhQUFhLENBQUNXLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUM7SUFDOUMsSUFBSSxDQUFDWCxZQUFZLENBQUNTLEtBQUssQ0FBQ0UsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQ1YsYUFBYSxDQUFDVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDVixhQUFhLENBQUNVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLEVBQUUsRUFBRSxJQUFJLENBQUNWLGFBQWEsQ0FBQ1UsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUUsRUFBRSxFQUFFLElBQUksQ0FBQ1YsYUFBYSxDQUFDVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRSxFQUFFLENBQUM7RUFDM0o7QUFDSixDQUFDO0FBRURiLEtBQUssQ0FBQ1UsU0FBUyxDQUFDRixVQUFVLEdBQUcsWUFBVztFQUNwQ1MsT0FBTyxDQUFDQyxHQUFHLENBQUMsSUFBSSxDQUFDO0VBQ2pCLElBQUlDLFNBQVMsR0FBRSxDQUNYLENBQUMsSUFBSSxDQUFDbEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUN0QyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUN0QyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUN0QyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUN0QyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUN0QyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUN0QyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUN0QyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUN0QyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUN6QztFQUNELElBQUltQixJQUFJLEdBQUcsSUFBSTtFQUNmRCxTQUFTLENBQUNFLE9BQU8sQ0FBRSxVQUFTQyxRQUFRLEVBQUM7SUFDakNGLElBQUksQ0FBQ2hCLEtBQUssQ0FBQ1csSUFBSSxDQUFDLElBQUlRLElBQUksQ0FBQ0QsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFQSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN2RCxDQUFDLENBQUM7QUFDTixDQUFDO0FBRUR0QixLQUFLLENBQUNVLFNBQVMsQ0FBQ2MsSUFBSSxHQUFHLFVBQVNDLEdBQUcsRUFBQztFQUNoQ0EsR0FBRyxDQUFDQyxTQUFT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\n//# sourceURL=webpack-internal:///./src/scripts/graph.js\n");

/***/ }),

/***/ "./src/scripts/legend.js":
/*!*******************************!*\
  !*** ./src/scripts/legend.js ***!
  \*******************************/
/***/ (function(module) {

eval("function Legend() {\n  this.nodes = [new Node(\"legendstart\", [100, 250]), new Node(\"legendend\", [100, 350])];\n}\nLegend.prototype.draw = function (ctx2) {\n  this.nodes[0].selected = 'start';\n  let that = this;\n  this.nodes.forEach(function (node) {\n    const a = 2 * Math.PI / 6;\n    const r = 13;\n    ctx2.beginPath();\n    for (var i = 0; i < 2; i++) {\n      ctx2.lineTo(that.nodes[0].pos[0] + r * Math.cos(a * i), that.nodes[0].pos[1] + r * Math.sin(a * i));\n    }\n    if (that.selected === 'start') {\n      ctx2.strokeStyle = \"green\";\n      ctx2.lineWidth = 7;\n    } else if (that.selected === 'end') {\n      ctx2.strokeStyle = \"red\";\n      ctx2.lineWidth = 7;\n    }\n    if (that.status !== 'visited') {\n      ctx2.fillStyle = 'white';\n    }\n    ctx2.closePath();\n    ctx2.stroke();\n  });\n};\nmodule.exports = Legend;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9sZWdlbmQuanMuanMiLCJuYW1lcyI6WyJMZWdlbmQiLCJub2RlcyIsIk5vZGUiLCJwcm90b3R5cGUiLCJkcmF3IiwiY3R4MiIsInNlbGVjdGVkIiwidGhhdCIsImZvckVhY2giLCJub2RlIiwiYSIsIk1hdGgiLCJQSSIsInIiLCJiZWdpblBhdGgiLCJpIiwibGluZVRvIiwicG9zIiwiY29zIiwic2luIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJzdGF0dXMiLCJmaWxsU3R5bGUiLCJjbG9zZVBhdGgiLCJzdHJva2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXRoLW9wdGltaXplci8uL3NyYy9zY3JpcHRzL2xlZ2VuZC5qcz8xZWE3Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIExlZ2VuZCgpe1xuICAgIHRoaXMubm9kZXMgPSBbbmV3IE5vZGUoXCJsZWdlbmRzdGFydFwiLCBbMTAwLCAyNTBdKSwgbmV3IE5vZGUoXCJsZWdlbmRlbmRcIiwgWzEwMCwgMzUwXSldO1xuXG59XG5cbkxlZ2VuZC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIChjdHgyKXtcbiAgICB0aGlzLm5vZGVzWzBdLnNlbGVjdGVkID0gJ3N0YXJ0J1xuICAgIGxldCB0aGF0ID0gdGhpc1xuICAgIHRoaXMubm9kZXMuZm9yRWFjaCAoZnVuY3Rpb24obm9kZSl7XG4gICAgICAgIGNvbnN0IGEgPSAyICogTWF0aC5QSSAvIDY7XG4gICAgICAgIGNvbnN0IHIgPSAxMztcbiAgICAgICAgY3R4Mi5iZWdpblBhdGgoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyOyBpKyspIHtcbiAgICAgICAgICAgIGN0eDIubGluZVRvKHRoYXQubm9kZXNbMF0ucG9zWzBdICsgciAqIE1hdGguY29zKGEgKiBpKSwgdGhhdC5ub2Rlc1swXS5wb3NbMV0gKyByICogTWF0aC5zaW4oYSAqIGkpKTtcbiAgICAgICAgfVxuICAgICAgICAgaWYgKHRoYXQuc2VsZWN0ZWQgPT09ICdzdGFydCcpe1xuICAgICAgICAgICAgY3R4Mi5zdHJva2VTdHlsZSA9IFwiZ3JlZW5cIjtcbiAgICAgICAgICAgIGN0eDIubGluZVdpZHRoID0gNztcbiAgICAgICAgfSBlbHNlIGlmICh0aGF0LnNlbGVjdGVkID09PSAnZW5kJyl7XG4gICAgICAgICAgICBjdHgyLnN0cm9rZVN0eWxlID0gXCJyZWRcIjtcbiAgICAgICAgICAgIGN0eDIubGluZVdpZHRoID0gNztcbiAgICAgICAgfSBcbiAgICAgICAgaWYgKHRoYXQuc3RhdHVzICE9PSAndmlzaXRlZCcpe1xuICAgICAgICAgICAgY3R4Mi5maWxsU3R5bGUgPSAnd2hpdGUnXG4gICAgICAgIH1cbiAgICAgICAgY3R4Mi5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4Mi5zdHJva2UoKTtcbiAgICB9KVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gTGVnZW5kOyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsTUFBTSxHQUFFO0VBQ2IsSUFBSSxDQUFDQyxLQUFLLEdBQUcsQ0FBQyxJQUFJQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRXpGO0FBRUFGLE1BQU0sQ0FBQ0csU0FBUyxDQUFDQyxJQUFJLEdBQUcsVUFBVUMsSUFBSSxFQUFDO0VBQ25DLElBQUksQ0FBQ0osS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDSyxRQUFRLEdBQUcsT0FBTztFQUNoQyxJQUFJQyxJQUFJLEdBQUcsSUFBSTtFQUNmLElBQUksQ0FBQ04sS0FBSyxDQUFDTyxPQUFPLENBQUUsVUFBU0MsSUFBSSxFQUFDO0lBQzlCLE1BQU1DLENBQUMsR0FBRyxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUM7SUFDekIsTUFBTUMsQ0FBQyxHQUFHLEVBQUU7SUFDWlIsSUFBSSxDQUFDUyxTQUFTLEVBQUU7SUFDaEIsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtNQUN4QlYsSUFBSSxDQUFDVyxNQUFNLENBQUNULElBQUksQ0FBQ04sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHSixDQUFDLEdBQUdGLElBQUksQ0FBQ08sR0FBRyxDQUFDUixDQUFDLEdBQUdLLENBQUMsQ0FBQyxFQUFFUixJQUFJLENBQUNOLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ2dCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBR0osQ0FBQyxHQUFHRixJQUFJLENBQUNRLEdBQUcsQ0FBQ1QsQ0FBQyxHQUFHSyxDQUFDLENBQUMsQ0FBQztJQUN2RztJQUNDLElBQUlSLElBQUksQ0FBQ0QsUUFBUSxLQUFLLE9BQU8sRUFBQztNQUMzQkQsSUFBSSxDQUFDZSxXQUFXLEdBQUcsT0FBTztNQUMxQmYsSUFBSSxDQUFDZ0IsU0FBUyxHQUFHLENBQUM7SUFDdEIsQ0FBQyxNQUFNLElBQUlkLElBQUksQ0FBQ0QsUUFBUSxLQUFLLEtBQUssRUFBQztNQUMvQkQsSUFBSSxDQUFDZSxXQUFXLEdBQUcsS0FBSztNQUN4QmYsSUFBSSxDQUFDZ0IsU0FBUyxHQUFHLENBQUM7SUFDdEI7SUFDQSxJQUFJZCxJQUFJLENBQUNlLE1BQU0sS0FBSyxTQUFTLEVBQUM7TUFDMUJqQixJQUFJLENBQUNrQixTQUFTLEdBQUcsT0FBTztJQUM1QjtJQUNBbEIsSUFBSSxDQUFDbUIsU0FBUyxFQUFFO0lBQ2hCbkIsSUFBSSxDQUFDb0IsTUFBTSxFQUFFO0VBQ2pCLENBQUMsQ0FBQztBQUNOLENBQUM7QUFHREMsTUFBTSxDQUFDQyxPQUFPLEdBQUczQixNQUFNIn0=\n//# sourceURL=webpack-internal:///./src/scripts/legend.js\n");

/***/ }),

/***/ "./src/scripts/node.js":
/*!*****************************!*\
  !*** ./src/scripts/node.js ***!
  \*****************************/
/***/ (function(module) {

eval("function Node(name, pos) {\n  this.name = name;\n  this.pos = pos;\n  this.radius = 10;\n  this.neighbors = {};\n  this.status = 'unvisited';\n  this.selected = null;\n  // this.size = size             used for creating a larger graph\n}\n\nNode.prototype.draw = function (ctx) {\n  const a = 2 * Math.PI / 6;\n  const r = 13;\n  ctx.beginPath();\n  for (var i = 0; i < 6; i++) {\n    ctx.lineTo(this.pos[0] + r * Math.cos(a * i), this.pos[1] + r * Math.sin(a * i));\n  }\n  if (this.selected === null) {\n    ctx.strokeStyle = \"black\";\n    ctx.lineWidth = 3;\n  } else if (this.selected === 'start') {\n    ctx.strokeStyle = \"green\";\n    ctx.lineWidth = 7;\n  } else if (this.selected === 'end') {\n    ctx.strokeStyle = \"red\";\n    ctx.lineWidth = 7;\n  }\n  if (this.status !== 'visited') {\n    ctx.fillStyle = 'white';\n  } else {\n    ctx.fillStyle = '#0288d1';\n  }\n  ctx.closePath();\n  ctx.stroke();\n  ctx.fill();\n};\nmodule.exports = Node;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9ub2RlLmpzLmpzIiwibmFtZXMiOlsiTm9kZSIsIm5hbWUiLCJwb3MiLCJyYWRpdXMiLCJuZWlnaGJvcnMiLCJzdGF0dXMiLCJzZWxlY3RlZCIsInByb3RvdHlwZSIsImRyYXciLCJjdHgiLCJhIiwiTWF0aCIsIlBJIiwiciIsImJlZ2luUGF0aCIsImkiLCJsaW5lVG8iLCJjb3MiLCJzaW4iLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImZpbGxTdHlsZSIsImNsb3NlUGF0aCIsInN0cm9rZSIsImZpbGwiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXRoLW9wdGltaXplci8uL3NyYy9zY3JpcHRzL25vZGUuanM/Zjk0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBOb2RlKG5hbWUsIHBvcyl7ICAgXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHRoaXMucG9zID0gcG9zXG4gICAgdGhpcy5yYWRpdXMgPSAxMFxuICAgIHRoaXMubmVpZ2hib3JzID0ge31cbiAgICB0aGlzLnN0YXR1cyA9ICd1bnZpc2l0ZWQnXG4gICAgdGhpcy5zZWxlY3RlZCA9IG51bGxcbiAgICAvLyB0aGlzLnNpemUgPSBzaXplICAgICAgICAgICAgIHVzZWQgZm9yIGNyZWF0aW5nIGEgbGFyZ2VyIGdyYXBoXG59XG5cbk5vZGUucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgpe1xuICAgIGNvbnN0IGEgPSAyICogTWF0aC5QSSAvIDY7XG4gICAgY29uc3QgciA9IDEzO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICBjdHgubGluZVRvKHRoaXMucG9zWzBdICsgciAqIE1hdGguY29zKGEgKiBpKSwgdGhpcy5wb3NbMV0gKyByICogTWF0aC5zaW4oYSAqIGkpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2VsZWN0ZWQgPT09IG51bGwpe1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAzO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZCA9PT0gJ3N0YXJ0Jyl7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiZ3JlZW5cIjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDc7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGVkID09PSAnZW5kJyl7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwicmVkXCI7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSA3O1xuICAgIH0gXG4gICAgaWYgKHRoaXMuc3RhdHVzICE9PSAndmlzaXRlZCcpe1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJ1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnIzAyODhkMSdcbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBjdHguZmlsbCgpXG4gICAgXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBOb2RlOyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsSUFBSSxDQUFDQyxJQUFJLEVBQUVDLEdBQUcsRUFBQztFQUNwQixJQUFJLENBQUNELElBQUksR0FBR0EsSUFBSTtFQUNoQixJQUFJLENBQUNDLEdBQUcsR0FBR0EsR0FBRztFQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEVBQUU7RUFDaEIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0VBQ25CLElBQUksQ0FBQ0MsTUFBTSxHQUFHLFdBQVc7RUFDekIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSTtFQUNwQjtBQUNKOztBQUVBTixJQUFJLENBQUNPLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHLFVBQVNDLEdBQUcsRUFBQztFQUMvQixNQUFNQyxDQUFDLEdBQUcsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLE1BQU1DLENBQUMsR0FBRyxFQUFFO0VBQ1pKLEdBQUcsQ0FBQ0ssU0FBUyxFQUFFO0VBQ2YsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtJQUN4Qk4sR0FBRyxDQUFDTyxNQUFNLENBQUMsSUFBSSxDQUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUdXLENBQUMsR0FBR0YsSUFBSSxDQUFDTSxHQUFHLENBQUNQLENBQUMsR0FBR0ssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUdXLENBQUMsR0FBR0YsSUFBSSxDQUFDTyxHQUFHLENBQUNSLENBQUMsR0FBR0ssQ0FBQyxDQUFDLENBQUM7RUFDcEY7RUFDQSxJQUFJLElBQUksQ0FBQ1QsUUFBUSxLQUFLLElBQUksRUFBQztJQUN2QkcsR0FBRyxDQUFDVSxXQUFXLEdBQUcsT0FBTztJQUN6QlYsR0FBRyxDQUFDVyxTQUFTLEdBQUcsQ0FBQztFQUNyQixDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUNkLFFBQVEsS0FBSyxPQUFPLEVBQUM7SUFDakNHLEdBQUcsQ0FBQ1UsV0FBVyxHQUFHLE9BQU87SUFDekJWLEdBQUcsQ0FBQ1csU0FBUyxHQUFHLENBQUM7RUFDckIsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDZCxRQUFRLEtBQUssS0FBSyxFQUFDO0lBQy9CRyxHQUFHLENBQUNVLFdBQVcsR0FBRyxLQUFLO0lBQ3ZCVixHQUFHLENBQUNXLFNBQVMsR0FBRyxDQUFDO0VBQ3JCO0VBQ0EsSUFBSSxJQUFJLENBQUNmLE1BQU0sS0FBSyxTQUFTLEVBQUM7SUFDMUJJLEdBQUcsQ0FBQ1ksU0FBUyxHQUFHLE9BQU87RUFDM0IsQ0FBQyxNQUFNO0lBQ0haLEdBQUcsQ0FBQ1ksU0FBUyxHQUFHLFNBQVM7RUFDN0I7RUFDQVosR0FBRyxDQUFDYSxTQUFTLEVBQUU7RUFDZmIsR0FBRyxDQUFDYyxNQUFNLEVBQUU7RUFDWmQsR0FBRyxDQUFDZSxJQUFJLEVBQUU7QUFFZCxDQUFDO0FBR0RDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHMUIsSUFBSSJ9\n//# sourceURL=webpack-internal:///./src/scripts/node.js\n");

/***/ }),

/***/ "./src/scripts/path.js":
/*!*****************************!*\
  !*** ./src/scripts/path.js ***!
  \*****************************/
/***/ (function(module) {

eval("function Path(parentNode, childNode, traffic) {\n  this.parentNode = parentNode;\n  this.childNode = childNode;\n  this.startPos = this.getStartPos();\n  this.endPos = this.getEndPos();\n  this.delta = [Math.abs(this.startPos[0] - this.endPos[0]), Math.abs(this.startPos[1] - this.endPos[1])];\n  this.distance = this.calculateDistance();\n  const trafficStatus = ['none', 'light', 'medium', 'heavy'];\n  this.traffic = trafficStatus[0];\n  this.weight = this.calculateWeight();\n  this.status = 'none';\n  this.associations();\n}\nPath.prototype.getStartPos = function () {\n  return this.parentNode.pos;\n};\nPath.prototype.getEndPos = function () {\n  return this.childNode.pos;\n};\nPath.prototype.calculateDistance = function () {\n  let a = this.startPos[0] - this.endPos[0];\n  let b = this.startPos[1] - this.endPos[1];\n  let c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n  return c / 96;\n};\nPath.prototype.calculateWeight = function () {\n  if (this.traffic === 'light') {\n    return Math.floor(this.distance * 1.5);\n  } else if (this.traffic === 'medium') {\n    return Math.floor(this.distance * 2.0);\n  } else if (this.traffic === 'heavy') {\n    return Math.floor(this.distance * 2.5);\n  } else {\n    return this.distance;\n  }\n};\nPath.prototype.draw = function (ctx) {\n  if (this.status === 'shortest') {\n    ctx.beginPath();\n    ctx.strokeStyle = '#0288d1';\n    ctx.lineWidth = 12;\n    ctx.moveTo(this.startPos[0], this.startPos[1]);\n    ctx.lineTo(this.endPos[0], this.endPos[1]);\n    ctx.stroke();\n  }\n  ctx.beginPath();\n  if (this.traffic === 'light') {\n    ctx.strokeStyle = 'yellow';\n    ctx.lineWidth = 6;\n  } else if (this.traffic === 'medium') {\n    ctx.strokeStyle = 'orange';\n    ctx.lineWidth = 6;\n  } else if (this.traffic === 'heavy') {\n    ctx.strokeStyle = 'red';\n    ctx.lineWidth = 6;\n  } else if (this.status === 'shortest') {\n    ctx.strokeStyle = '#0288d1';\n    ctx.lineWidth = 6;\n  }\n  ctx.moveTo(this.startPos[0], this.startPos[1]);\n  ctx.lineTo(this.endPos[0], this.endPos[1]);\n  ctx.stroke();\n  ctx.beginPath();\n  ctx.strokeStyle = 'black';\n  ctx.lineWidth = 1;\n  ctx.moveTo(this.startPos[0], this.startPos[1]);\n  ctx.lineTo(this.endPos[0], this.endPos[1]);\n  ctx.stroke();\n};\nPath.prototype.associations = function () {\n  this.parentNode.neighbors[this.childNode.name] = this.weight;\n  this.childNode.neighbors[this.parentNode.name] = this.weight;\n};\nmodule.exports = Path;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/path.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXRoLW9wdGltaXplci8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;